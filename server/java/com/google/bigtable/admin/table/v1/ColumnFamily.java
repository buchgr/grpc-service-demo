// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_data.proto

package com.google.bigtable.admin.table.v1;

/**
 * <pre>
 * A set of columns within a table which share a common configuration.
 * </pre>
 *
 * Protobuf type {@code google.bigtable.admin.table.v1.ColumnFamily}
 */
public  final class ColumnFamily extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.table.v1.ColumnFamily)
    ColumnFamilyOrBuilder {
  // Use ColumnFamily.newBuilder() to construct.
  private ColumnFamily(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ColumnFamily() {
    name_ = "";
    gcExpression_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ColumnFamily(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            gcExpression_ = s;
            break;
          }
          case 26: {
            com.google.bigtable.admin.table.v1.GcRule.Builder subBuilder = null;
            if (gcRule_ != null) {
              subBuilder = gcRule_.toBuilder();
            }
            gcRule_ = input.readMessage(com.google.bigtable.admin.table.v1.GcRule.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(gcRule_);
              gcRule_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.table.v1.BigtableTableDataProto.internal_static_google_bigtable_admin_table_v1_ColumnFamily_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.table.v1.BigtableTableDataProto.internal_static_google_bigtable_admin_table_v1_ColumnFamily_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.table.v1.ColumnFamily.class, com.google.bigtable.admin.table.v1.ColumnFamily.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
   * The last segment is the same as the "name" field in
   * google.bigtable.v1.Family.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
   * The last segment is the same as the "name" field in
   * google.bigtable.v1.Family.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GC_EXPRESSION_FIELD_NUMBER = 2;
  private volatile java.lang.Object gcExpression_;
  /**
   * <pre>
   * Garbage collection expression specified by the following grammar:
   *   GC = EXPR
   *      | "" ;
   *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
   *        | EXPR, "&amp;&amp;", EXPR
   *        | "(", EXPR, ")"                (* highest precedence *)
   *        | PROP ;
   *   PROP = "version() &gt;", NUM32
   *        | "age() &gt;", NUM64, [ UNIT ] ;
   *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
   *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
   *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
   * GC expressions can be up to 500 characters in length
   * The different types of PROP are defined as follows:
   *   version() - cell index, counting from most recent and starting at 1
   *   age() - age of the cell (current time minus cell timestamp)
   * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
   *   drop cells beyond the most recent three, and drop cells older than three
   *   days unless they're the most recent cell in the row/column
   * Garbage collection executes opportunistically in the background, and so
   * it's possible for reads to return a cell even if it matches the active GC
   * expression for its family.
   * </pre>
   *
   * <code>string gc_expression = 2;</code>
   */
  public java.lang.String getGcExpression() {
    java.lang.Object ref = gcExpression_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      gcExpression_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Garbage collection expression specified by the following grammar:
   *   GC = EXPR
   *      | "" ;
   *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
   *        | EXPR, "&amp;&amp;", EXPR
   *        | "(", EXPR, ")"                (* highest precedence *)
   *        | PROP ;
   *   PROP = "version() &gt;", NUM32
   *        | "age() &gt;", NUM64, [ UNIT ] ;
   *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
   *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
   *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
   * GC expressions can be up to 500 characters in length
   * The different types of PROP are defined as follows:
   *   version() - cell index, counting from most recent and starting at 1
   *   age() - age of the cell (current time minus cell timestamp)
   * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
   *   drop cells beyond the most recent three, and drop cells older than three
   *   days unless they're the most recent cell in the row/column
   * Garbage collection executes opportunistically in the background, and so
   * it's possible for reads to return a cell even if it matches the active GC
   * expression for its family.
   * </pre>
   *
   * <code>string gc_expression = 2;</code>
   */
  public com.google.protobuf.ByteString
      getGcExpressionBytes() {
    java.lang.Object ref = gcExpression_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      gcExpression_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GC_RULE_FIELD_NUMBER = 3;
  private com.google.bigtable.admin.table.v1.GcRule gcRule_;
  /**
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
   */
  public boolean hasGcRule() {
    return gcRule_ != null;
  }
  /**
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
   */
  public com.google.bigtable.admin.table.v1.GcRule getGcRule() {
    return gcRule_ == null ? com.google.bigtable.admin.table.v1.GcRule.getDefaultInstance() : gcRule_;
  }
  /**
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
   */
  public com.google.bigtable.admin.table.v1.GcRuleOrBuilder getGcRuleOrBuilder() {
    return getGcRule();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!getGcExpressionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, gcExpression_);
    }
    if (gcRule_ != null) {
      output.writeMessage(3, getGcRule());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!getGcExpressionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, gcExpression_);
    }
    if (gcRule_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getGcRule());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.bigtable.admin.table.v1.ColumnFamily)) {
      return super.equals(obj);
    }
    com.google.bigtable.admin.table.v1.ColumnFamily other = (com.google.bigtable.admin.table.v1.ColumnFamily) obj;

    boolean result = true;
    result = result && getName()
        .equals(other.getName());
    result = result && getGcExpression()
        .equals(other.getGcExpression());
    result = result && (hasGcRule() == other.hasGcRule());
    if (hasGcRule()) {
      result = result && getGcRule()
          .equals(other.getGcRule());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + GC_EXPRESSION_FIELD_NUMBER;
    hash = (53 * hash) + getGcExpression().hashCode();
    if (hasGcRule()) {
      hash = (37 * hash) + GC_RULE_FIELD_NUMBER;
      hash = (53 * hash) + getGcRule().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.table.v1.ColumnFamily parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.table.v1.ColumnFamily prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A set of columns within a table which share a common configuration.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.admin.table.v1.ColumnFamily}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.table.v1.ColumnFamily)
      com.google.bigtable.admin.table.v1.ColumnFamilyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.table.v1.BigtableTableDataProto.internal_static_google_bigtable_admin_table_v1_ColumnFamily_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.table.v1.BigtableTableDataProto.internal_static_google_bigtable_admin_table_v1_ColumnFamily_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.table.v1.ColumnFamily.class, com.google.bigtable.admin.table.v1.ColumnFamily.Builder.class);
    }

    // Construct using com.google.bigtable.admin.table.v1.ColumnFamily.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      gcExpression_ = "";

      if (gcRuleBuilder_ == null) {
        gcRule_ = null;
      } else {
        gcRule_ = null;
        gcRuleBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.table.v1.BigtableTableDataProto.internal_static_google_bigtable_admin_table_v1_ColumnFamily_descriptor;
    }

    public com.google.bigtable.admin.table.v1.ColumnFamily getDefaultInstanceForType() {
      return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
    }

    public com.google.bigtable.admin.table.v1.ColumnFamily build() {
      com.google.bigtable.admin.table.v1.ColumnFamily result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.admin.table.v1.ColumnFamily buildPartial() {
      com.google.bigtable.admin.table.v1.ColumnFamily result = new com.google.bigtable.admin.table.v1.ColumnFamily(this);
      result.name_ = name_;
      result.gcExpression_ = gcExpression_;
      if (gcRuleBuilder_ == null) {
        result.gcRule_ = gcRule_;
      } else {
        result.gcRule_ = gcRuleBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.table.v1.ColumnFamily) {
        return mergeFrom((com.google.bigtable.admin.table.v1.ColumnFamily)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.table.v1.ColumnFamily other) {
      if (other == com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getGcExpression().isEmpty()) {
        gcExpression_ = other.gcExpression_;
        onChanged();
      }
      if (other.hasGcRule()) {
        mergeGcRule(other.getGcRule());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.admin.table.v1.ColumnFamily parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.admin.table.v1.ColumnFamily) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object gcExpression_ = "";
    /**
     * <pre>
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&amp;&amp;", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() &gt;", NUM32
     *        | "age() &gt;", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     * </pre>
     *
     * <code>string gc_expression = 2;</code>
     */
    public java.lang.String getGcExpression() {
      java.lang.Object ref = gcExpression_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        gcExpression_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&amp;&amp;", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() &gt;", NUM32
     *        | "age() &gt;", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     * </pre>
     *
     * <code>string gc_expression = 2;</code>
     */
    public com.google.protobuf.ByteString
        getGcExpressionBytes() {
      java.lang.Object ref = gcExpression_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gcExpression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&amp;&amp;", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() &gt;", NUM32
     *        | "age() &gt;", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     * </pre>
     *
     * <code>string gc_expression = 2;</code>
     */
    public Builder setGcExpression(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      gcExpression_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&amp;&amp;", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() &gt;", NUM32
     *        | "age() &gt;", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     * </pre>
     *
     * <code>string gc_expression = 2;</code>
     */
    public Builder clearGcExpression() {
      
      gcExpression_ = getDefaultInstance().getGcExpression();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&amp;&amp;", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() &gt;", NUM32
     *        | "age() &gt;", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     * </pre>
     *
     * <code>string gc_expression = 2;</code>
     */
    public Builder setGcExpressionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      gcExpression_ = value;
      onChanged();
      return this;
    }

    private com.google.bigtable.admin.table.v1.GcRule gcRule_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.bigtable.admin.table.v1.GcRule, com.google.bigtable.admin.table.v1.GcRule.Builder, com.google.bigtable.admin.table.v1.GcRuleOrBuilder> gcRuleBuilder_;
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public boolean hasGcRule() {
      return gcRuleBuilder_ != null || gcRule_ != null;
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public com.google.bigtable.admin.table.v1.GcRule getGcRule() {
      if (gcRuleBuilder_ == null) {
        return gcRule_ == null ? com.google.bigtable.admin.table.v1.GcRule.getDefaultInstance() : gcRule_;
      } else {
        return gcRuleBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public Builder setGcRule(com.google.bigtable.admin.table.v1.GcRule value) {
      if (gcRuleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        gcRule_ = value;
        onChanged();
      } else {
        gcRuleBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public Builder setGcRule(
        com.google.bigtable.admin.table.v1.GcRule.Builder builderForValue) {
      if (gcRuleBuilder_ == null) {
        gcRule_ = builderForValue.build();
        onChanged();
      } else {
        gcRuleBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public Builder mergeGcRule(com.google.bigtable.admin.table.v1.GcRule value) {
      if (gcRuleBuilder_ == null) {
        if (gcRule_ != null) {
          gcRule_ =
            com.google.bigtable.admin.table.v1.GcRule.newBuilder(gcRule_).mergeFrom(value).buildPartial();
        } else {
          gcRule_ = value;
        }
        onChanged();
      } else {
        gcRuleBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public Builder clearGcRule() {
      if (gcRuleBuilder_ == null) {
        gcRule_ = null;
        onChanged();
      } else {
        gcRule_ = null;
        gcRuleBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public com.google.bigtable.admin.table.v1.GcRule.Builder getGcRuleBuilder() {
      
      onChanged();
      return getGcRuleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    public com.google.bigtable.admin.table.v1.GcRuleOrBuilder getGcRuleOrBuilder() {
      if (gcRuleBuilder_ != null) {
        return gcRuleBuilder_.getMessageOrBuilder();
      } else {
        return gcRule_ == null ?
            com.google.bigtable.admin.table.v1.GcRule.getDefaultInstance() : gcRule_;
      }
    }
    /**
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.bigtable.admin.table.v1.GcRule, com.google.bigtable.admin.table.v1.GcRule.Builder, com.google.bigtable.admin.table.v1.GcRuleOrBuilder> 
        getGcRuleFieldBuilder() {
      if (gcRuleBuilder_ == null) {
        gcRuleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.bigtable.admin.table.v1.GcRule, com.google.bigtable.admin.table.v1.GcRule.Builder, com.google.bigtable.admin.table.v1.GcRuleOrBuilder>(
                getGcRule(),
                getParentForChildren(),
                isClean());
        gcRule_ = null;
      }
      return gcRuleBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.table.v1.ColumnFamily)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.ColumnFamily)
  private static final com.google.bigtable.admin.table.v1.ColumnFamily DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.table.v1.ColumnFamily();
  }

  public static com.google.bigtable.admin.table.v1.ColumnFamily getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ColumnFamily>
      PARSER = new com.google.protobuf.AbstractParser<ColumnFamily>() {
    public ColumnFamily parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColumnFamily(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ColumnFamily> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ColumnFamily> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.admin.table.v1.ColumnFamily getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

