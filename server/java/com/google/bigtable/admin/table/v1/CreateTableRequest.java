// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto

package com.google.bigtable.admin.table.v1;

/**
 * Protobuf type {@code google.bigtable.admin.table.v1.CreateTableRequest}
 */
public  final class CreateTableRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.table.v1.CreateTableRequest)
    CreateTableRequestOrBuilder {
  // Use CreateTableRequest.newBuilder() to construct.
  private CreateTableRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CreateTableRequest() {
    name_ = "";
    tableId_ = "";
    initialSplitKeys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CreateTableRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            tableId_ = s;
            break;
          }
          case 26: {
            com.google.bigtable.admin.table.v1.Table.Builder subBuilder = null;
            if (table_ != null) {
              subBuilder = table_.toBuilder();
            }
            table_ = input.readMessage(com.google.bigtable.admin.table.v1.Table.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(table_);
              table_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              initialSplitKeys_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000008;
            }
            initialSplitKeys_.add(s);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        initialSplitKeys_ = initialSplitKeys_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.table.v1.BigtableTableServiceMessagesProto.internal_static_google_bigtable_admin_table_v1_CreateTableRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.table.v1.BigtableTableServiceMessagesProto.internal_static_google_bigtable_admin_table_v1_CreateTableRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.table.v1.CreateTableRequest.class, com.google.bigtable.admin.table.v1.CreateTableRequest.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The unique name of the cluster in which to create the new table.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The unique name of the cluster in which to create the new table.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object tableId_;
  /**
   * <pre>
   * The name by which the new table should be referred to within the cluster,
   * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
   * </pre>
   *
   * <code>string table_id = 2;</code>
   */
  public java.lang.String getTableId() {
    java.lang.Object ref = tableId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      tableId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name by which the new table should be referred to within the cluster,
   * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
   * </pre>
   *
   * <code>string table_id = 2;</code>
   */
  public com.google.protobuf.ByteString
      getTableIdBytes() {
    java.lang.Object ref = tableId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tableId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_FIELD_NUMBER = 3;
  private com.google.bigtable.admin.table.v1.Table table_;
  /**
   * <pre>
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
   */
  public boolean hasTable() {
    return table_ != null;
  }
  /**
   * <pre>
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
   */
  public com.google.bigtable.admin.table.v1.Table getTable() {
    return table_ == null ? com.google.bigtable.admin.table.v1.Table.getDefaultInstance() : table_;
  }
  /**
   * <pre>
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
   */
  public com.google.bigtable.admin.table.v1.TableOrBuilder getTableOrBuilder() {
    return getTable();
  }

  public static final int INITIAL_SPLIT_KEYS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList initialSplitKeys_;
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getInitialSplitKeysList() {
    return initialSplitKeys_;
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  public int getInitialSplitKeysCount() {
    return initialSplitKeys_.size();
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  public java.lang.String getInitialSplitKeys(int index) {
    return initialSplitKeys_.get(index);
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  public com.google.protobuf.ByteString
      getInitialSplitKeysBytes(int index) {
    return initialSplitKeys_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!getTableIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tableId_);
    }
    if (table_ != null) {
      output.writeMessage(3, getTable());
    }
    for (int i = 0; i < initialSplitKeys_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, initialSplitKeys_.getRaw(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!getTableIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tableId_);
    }
    if (table_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTable());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < initialSplitKeys_.size(); i++) {
        dataSize += computeStringSizeNoTag(initialSplitKeys_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getInitialSplitKeysList().size();
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.bigtable.admin.table.v1.CreateTableRequest)) {
      return super.equals(obj);
    }
    com.google.bigtable.admin.table.v1.CreateTableRequest other = (com.google.bigtable.admin.table.v1.CreateTableRequest) obj;

    boolean result = true;
    result = result && getName()
        .equals(other.getName());
    result = result && getTableId()
        .equals(other.getTableId());
    result = result && (hasTable() == other.hasTable());
    if (hasTable()) {
      result = result && getTable()
          .equals(other.getTable());
    }
    result = result && getInitialSplitKeysList()
        .equals(other.getInitialSplitKeysList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + TABLE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTableId().hashCode();
    if (hasTable()) {
      hash = (37 * hash) + TABLE_FIELD_NUMBER;
      hash = (53 * hash) + getTable().hashCode();
    }
    if (getInitialSplitKeysCount() > 0) {
      hash = (37 * hash) + INITIAL_SPLIT_KEYS_FIELD_NUMBER;
      hash = (53 * hash) + getInitialSplitKeysList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.table.v1.CreateTableRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.table.v1.CreateTableRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.bigtable.admin.table.v1.CreateTableRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.table.v1.CreateTableRequest)
      com.google.bigtable.admin.table.v1.CreateTableRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.table.v1.BigtableTableServiceMessagesProto.internal_static_google_bigtable_admin_table_v1_CreateTableRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.table.v1.BigtableTableServiceMessagesProto.internal_static_google_bigtable_admin_table_v1_CreateTableRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.table.v1.CreateTableRequest.class, com.google.bigtable.admin.table.v1.CreateTableRequest.Builder.class);
    }

    // Construct using com.google.bigtable.admin.table.v1.CreateTableRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      tableId_ = "";

      if (tableBuilder_ == null) {
        table_ = null;
      } else {
        table_ = null;
        tableBuilder_ = null;
      }
      initialSplitKeys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.table.v1.BigtableTableServiceMessagesProto.internal_static_google_bigtable_admin_table_v1_CreateTableRequest_descriptor;
    }

    public com.google.bigtable.admin.table.v1.CreateTableRequest getDefaultInstanceForType() {
      return com.google.bigtable.admin.table.v1.CreateTableRequest.getDefaultInstance();
    }

    public com.google.bigtable.admin.table.v1.CreateTableRequest build() {
      com.google.bigtable.admin.table.v1.CreateTableRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.admin.table.v1.CreateTableRequest buildPartial() {
      com.google.bigtable.admin.table.v1.CreateTableRequest result = new com.google.bigtable.admin.table.v1.CreateTableRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      result.tableId_ = tableId_;
      if (tableBuilder_ == null) {
        result.table_ = table_;
      } else {
        result.table_ = tableBuilder_.build();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        initialSplitKeys_ = initialSplitKeys_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.initialSplitKeys_ = initialSplitKeys_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.table.v1.CreateTableRequest) {
        return mergeFrom((com.google.bigtable.admin.table.v1.CreateTableRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.table.v1.CreateTableRequest other) {
      if (other == com.google.bigtable.admin.table.v1.CreateTableRequest.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getTableId().isEmpty()) {
        tableId_ = other.tableId_;
        onChanged();
      }
      if (other.hasTable()) {
        mergeTable(other.getTable());
      }
      if (!other.initialSplitKeys_.isEmpty()) {
        if (initialSplitKeys_.isEmpty()) {
          initialSplitKeys_ = other.initialSplitKeys_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureInitialSplitKeysIsMutable();
          initialSplitKeys_.addAll(other.initialSplitKeys_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.admin.table.v1.CreateTableRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.admin.table.v1.CreateTableRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The unique name of the cluster in which to create the new table.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The unique name of the cluster in which to create the new table.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The unique name of the cluster in which to create the new table.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The unique name of the cluster in which to create the new table.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The unique name of the cluster in which to create the new table.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object tableId_ = "";
    /**
     * <pre>
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
     * </pre>
     *
     * <code>string table_id = 2;</code>
     */
    public java.lang.String getTableId() {
      java.lang.Object ref = tableId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
     * </pre>
     *
     * <code>string table_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTableIdBytes() {
      java.lang.Object ref = tableId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
     * </pre>
     *
     * <code>string table_id = 2;</code>
     */
    public Builder setTableId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      tableId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
     * </pre>
     *
     * <code>string table_id = 2;</code>
     */
    public Builder clearTableId() {
      
      tableId_ = getDefaultInstance().getTableId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
     * </pre>
     *
     * <code>string table_id = 2;</code>
     */
    public Builder setTableIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      tableId_ = value;
      onChanged();
      return this;
    }

    private com.google.bigtable.admin.table.v1.Table table_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.bigtable.admin.table.v1.Table, com.google.bigtable.admin.table.v1.Table.Builder, com.google.bigtable.admin.table.v1.TableOrBuilder> tableBuilder_;
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public boolean hasTable() {
      return tableBuilder_ != null || table_ != null;
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public com.google.bigtable.admin.table.v1.Table getTable() {
      if (tableBuilder_ == null) {
        return table_ == null ? com.google.bigtable.admin.table.v1.Table.getDefaultInstance() : table_;
      } else {
        return tableBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public Builder setTable(com.google.bigtable.admin.table.v1.Table value) {
      if (tableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        table_ = value;
        onChanged();
      } else {
        tableBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public Builder setTable(
        com.google.bigtable.admin.table.v1.Table.Builder builderForValue) {
      if (tableBuilder_ == null) {
        table_ = builderForValue.build();
        onChanged();
      } else {
        tableBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public Builder mergeTable(com.google.bigtable.admin.table.v1.Table value) {
      if (tableBuilder_ == null) {
        if (table_ != null) {
          table_ =
            com.google.bigtable.admin.table.v1.Table.newBuilder(table_).mergeFrom(value).buildPartial();
        } else {
          table_ = value;
        }
        onChanged();
      } else {
        tableBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public Builder clearTable() {
      if (tableBuilder_ == null) {
        table_ = null;
        onChanged();
      } else {
        table_ = null;
        tableBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public com.google.bigtable.admin.table.v1.Table.Builder getTableBuilder() {
      
      onChanged();
      return getTableFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    public com.google.bigtable.admin.table.v1.TableOrBuilder getTableOrBuilder() {
      if (tableBuilder_ != null) {
        return tableBuilder_.getMessageOrBuilder();
      } else {
        return table_ == null ?
            com.google.bigtable.admin.table.v1.Table.getDefaultInstance() : table_;
      }
    }
    /**
     * <pre>
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     * </pre>
     *
     * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.bigtable.admin.table.v1.Table, com.google.bigtable.admin.table.v1.Table.Builder, com.google.bigtable.admin.table.v1.TableOrBuilder> 
        getTableFieldBuilder() {
      if (tableBuilder_ == null) {
        tableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.bigtable.admin.table.v1.Table, com.google.bigtable.admin.table.v1.Table.Builder, com.google.bigtable.admin.table.v1.TableOrBuilder>(
                getTable(),
                getParentForChildren(),
                isClean());
        table_ = null;
      }
      return tableBuilder_;
    }

    private com.google.protobuf.LazyStringList initialSplitKeys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureInitialSplitKeysIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        initialSplitKeys_ = new com.google.protobuf.LazyStringArrayList(initialSplitKeys_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getInitialSplitKeysList() {
      return initialSplitKeys_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public int getInitialSplitKeysCount() {
      return initialSplitKeys_.size();
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public java.lang.String getInitialSplitKeys(int index) {
      return initialSplitKeys_.get(index);
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public com.google.protobuf.ByteString
        getInitialSplitKeysBytes(int index) {
      return initialSplitKeys_.getByteString(index);
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public Builder setInitialSplitKeys(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureInitialSplitKeysIsMutable();
      initialSplitKeys_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public Builder addInitialSplitKeys(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureInitialSplitKeysIsMutable();
      initialSplitKeys_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public Builder addAllInitialSplitKeys(
        java.lang.Iterable<java.lang.String> values) {
      ensureInitialSplitKeysIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, initialSplitKeys_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public Builder clearInitialSplitKeys() {
      initialSplitKeys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                =&gt; {"a"}.
     *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
     *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
     * </pre>
     *
     * <code>repeated string initial_split_keys = 4;</code>
     */
    public Builder addInitialSplitKeysBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureInitialSplitKeysIsMutable();
      initialSplitKeys_.add(value);
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.table.v1.CreateTableRequest)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.CreateTableRequest)
  private static final com.google.bigtable.admin.table.v1.CreateTableRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.table.v1.CreateTableRequest();
  }

  public static com.google.bigtable.admin.table.v1.CreateTableRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CreateTableRequest>
      PARSER = new com.google.protobuf.AbstractParser<CreateTableRequest>() {
    public CreateTableRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CreateTableRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CreateTableRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CreateTableRequest> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.admin.table.v1.CreateTableRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

