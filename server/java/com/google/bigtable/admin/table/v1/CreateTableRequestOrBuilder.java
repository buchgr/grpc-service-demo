// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto

package com.google.bigtable.admin.table.v1;

public interface CreateTableRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.admin.table.v1.CreateTableRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The unique name of the cluster in which to create the new table.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * The unique name of the cluster in which to create the new table.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The name by which the new table should be referred to within the cluster,
   * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
   * </pre>
   *
   * <code>string table_id = 2;</code>
   */
  java.lang.String getTableId();
  /**
   * <pre>
   * The name by which the new table should be referred to within the cluster,
   * e.g. "foobar" rather than "&lt;cluster_name&gt;/tables/foobar".
   * </pre>
   *
   * <code>string table_id = 2;</code>
   */
  com.google.protobuf.ByteString
      getTableIdBytes();

  /**
   * <pre>
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
   */
  boolean hasTable();
  /**
   * <pre>
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
   */
  com.google.bigtable.admin.table.v1.Table getTable();
  /**
   * <pre>
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
   */
  com.google.bigtable.admin.table.v1.TableOrBuilder getTableOrBuilder();

  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  java.util.List<java.lang.String>
      getInitialSplitKeysList();
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  int getInitialSplitKeysCount();
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  java.lang.String getInitialSplitKeys(int index);
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                =&gt; {"a"}.
   *    - Tablet 2 [apple, customer_1)      =&gt; {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) =&gt; {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      =&gt; {"customer_2"}.
   *    - Tablet 5 [other, )                =&gt; {"other", "zz"}.
   * </pre>
   *
   * <code>repeated string initial_split_keys = 4;</code>
   */
  com.google.protobuf.ByteString
      getInitialSplitKeysBytes(int index);
}
