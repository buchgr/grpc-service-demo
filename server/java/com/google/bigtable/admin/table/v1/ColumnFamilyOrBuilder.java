// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_data.proto

package com.google.bigtable.admin.table.v1;

public interface ColumnFamilyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.admin.table.v1.ColumnFamily)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
   * The last segment is the same as the "name" field in
   * google.bigtable.v1.Family.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * A unique identifier of the form &lt;table_name&gt;/columnFamilies/[-_.a-zA-Z0-9]+
   * The last segment is the same as the "name" field in
   * google.bigtable.v1.Family.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Garbage collection expression specified by the following grammar:
   *   GC = EXPR
   *      | "" ;
   *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
   *        | EXPR, "&amp;&amp;", EXPR
   *        | "(", EXPR, ")"                (* highest precedence *)
   *        | PROP ;
   *   PROP = "version() &gt;", NUM32
   *        | "age() &gt;", NUM64, [ UNIT ] ;
   *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
   *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
   *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
   * GC expressions can be up to 500 characters in length
   * The different types of PROP are defined as follows:
   *   version() - cell index, counting from most recent and starting at 1
   *   age() - age of the cell (current time minus cell timestamp)
   * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
   *   drop cells beyond the most recent three, and drop cells older than three
   *   days unless they're the most recent cell in the row/column
   * Garbage collection executes opportunistically in the background, and so
   * it's possible for reads to return a cell even if it matches the active GC
   * expression for its family.
   * </pre>
   *
   * <code>string gc_expression = 2;</code>
   */
  java.lang.String getGcExpression();
  /**
   * <pre>
   * Garbage collection expression specified by the following grammar:
   *   GC = EXPR
   *      | "" ;
   *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
   *        | EXPR, "&amp;&amp;", EXPR
   *        | "(", EXPR, ")"                (* highest precedence *)
   *        | PROP ;
   *   PROP = "version() &gt;", NUM32
   *        | "age() &gt;", NUM64, [ UNIT ] ;
   *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 &lt;= 2^32 - 1 *)
   *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 &lt;= 2^63 - 1 *)
   *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
   * GC expressions can be up to 500 characters in length
   * The different types of PROP are defined as follows:
   *   version() - cell index, counting from most recent and starting at 1
   *   age() - age of the cell (current time minus cell timestamp)
   * Example: "version() &gt; 3 || (age() &gt; 3d &amp;&amp; version() &gt; 1)"
   *   drop cells beyond the most recent three, and drop cells older than three
   *   days unless they're the most recent cell in the row/column
   * Garbage collection executes opportunistically in the background, and so
   * it's possible for reads to return a cell even if it matches the active GC
   * expression for its family.
   * </pre>
   *
   * <code>string gc_expression = 2;</code>
   */
  com.google.protobuf.ByteString
      getGcExpressionBytes();

  /**
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
   */
  boolean hasGcRule();
  /**
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
   */
  com.google.bigtable.admin.table.v1.GcRule getGcRule();
  /**
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   *
   * <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
   */
  com.google.bigtable.admin.table.v1.GcRuleOrBuilder getGcRuleOrBuilder();
}
