// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto

package com.google.bigtable.v1;

/**
 * <pre>
 * Response message for BigtableService.ReadRows.
 * </pre>
 *
 * Protobuf type {@code google.bigtable.v1.ReadRowsResponse}
 */
public  final class ReadRowsResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.bigtable.v1.ReadRowsResponse)
    ReadRowsResponseOrBuilder {
  // Use ReadRowsResponse.newBuilder() to construct.
  private ReadRowsResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ReadRowsResponse() {
    rowKey_ = com.google.protobuf.ByteString.EMPTY;
    chunks_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ReadRowsResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {

            rowKey_ = input.readBytes();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              chunks_ = new java.util.ArrayList<com.google.bigtable.v1.ReadRowsResponse.Chunk>();
              mutable_bitField0_ |= 0x00000002;
            }
            chunks_.add(
                input.readMessage(com.google.bigtable.v1.ReadRowsResponse.Chunk.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        chunks_ = java.util.Collections.unmodifiableList(chunks_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.v1.ReadRowsResponse.class, com.google.bigtable.v1.ReadRowsResponse.Builder.class);
  }

  public interface ChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.v1.ReadRowsResponse.Chunk)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     * </pre>
     *
     * <code>.google.bigtable.v1.Family row_contents = 1;</code>
     */
    com.google.bigtable.v1.Family getRowContents();
    /**
     * <pre>
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     * </pre>
     *
     * <code>.google.bigtable.v1.Family row_contents = 1;</code>
     */
    com.google.bigtable.v1.FamilyOrBuilder getRowContentsOrBuilder();

    /**
     * <pre>
     * Indicates that the client should drop all previous chunks for
     * "row_key", as it will be re-read from the beginning.
     * </pre>
     *
     * <code>bool reset_row = 2;</code>
     */
    boolean getResetRow();

    /**
     * <pre>
     * Indicates that the client can safely process all previous chunks for
     * "row_key", as its data has been fully read.
     * </pre>
     *
     * <code>bool commit_row = 3;</code>
     */
    boolean getCommitRow();

    public com.google.bigtable.v1.ReadRowsResponse.Chunk.ChunkCase getChunkCase();
  }
  /**
   * <pre>
   * Specifies a piece of a row's contents returned as part of the read
   * response stream.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v1.ReadRowsResponse.Chunk}
   */
  public  static final class Chunk extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.bigtable.v1.ReadRowsResponse.Chunk)
      ChunkOrBuilder {
    // Use Chunk.newBuilder() to construct.
    private Chunk(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Chunk() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Chunk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.bigtable.v1.Family.Builder subBuilder = null;
              if (chunkCase_ == 1) {
                subBuilder = ((com.google.bigtable.v1.Family) chunk_).toBuilder();
              }
              chunk_ =
                  input.readMessage(com.google.bigtable.v1.Family.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.bigtable.v1.Family) chunk_);
                chunk_ = subBuilder.buildPartial();
              }
              chunkCase_ = 1;
              break;
            }
            case 16: {
              chunkCase_ = 2;
              chunk_ = input.readBool();
              break;
            }
            case 24: {
              chunkCase_ = 3;
              chunk_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_Chunk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_Chunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.v1.ReadRowsResponse.Chunk.class, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder.class);
    }

    private int chunkCase_ = 0;
    private java.lang.Object chunk_;
    public enum ChunkCase
        implements com.google.protobuf.Internal.EnumLite {
      ROW_CONTENTS(1),
      RESET_ROW(2),
      COMMIT_ROW(3),
      CHUNK_NOT_SET(0);
      private final int value;
      private ChunkCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ChunkCase valueOf(int value) {
        return forNumber(value);
      }

      public static ChunkCase forNumber(int value) {
        switch (value) {
          case 1: return ROW_CONTENTS;
          case 2: return RESET_ROW;
          case 3: return COMMIT_ROW;
          case 0: return CHUNK_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ChunkCase
    getChunkCase() {
      return ChunkCase.forNumber(
          chunkCase_);
    }

    public static final int ROW_CONTENTS_FIELD_NUMBER = 1;
    /**
     * <pre>
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     * </pre>
     *
     * <code>.google.bigtable.v1.Family row_contents = 1;</code>
     */
    public com.google.bigtable.v1.Family getRowContents() {
      if (chunkCase_ == 1) {
         return (com.google.bigtable.v1.Family) chunk_;
      }
      return com.google.bigtable.v1.Family.getDefaultInstance();
    }
    /**
     * <pre>
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     * </pre>
     *
     * <code>.google.bigtable.v1.Family row_contents = 1;</code>
     */
    public com.google.bigtable.v1.FamilyOrBuilder getRowContentsOrBuilder() {
      if (chunkCase_ == 1) {
         return (com.google.bigtable.v1.Family) chunk_;
      }
      return com.google.bigtable.v1.Family.getDefaultInstance();
    }

    public static final int RESET_ROW_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Indicates that the client should drop all previous chunks for
     * "row_key", as it will be re-read from the beginning.
     * </pre>
     *
     * <code>bool reset_row = 2;</code>
     */
    public boolean getResetRow() {
      if (chunkCase_ == 2) {
        return (java.lang.Boolean) chunk_;
      }
      return false;
    }

    public static final int COMMIT_ROW_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Indicates that the client can safely process all previous chunks for
     * "row_key", as its data has been fully read.
     * </pre>
     *
     * <code>bool commit_row = 3;</code>
     */
    public boolean getCommitRow() {
      if (chunkCase_ == 3) {
        return (java.lang.Boolean) chunk_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (chunkCase_ == 1) {
        output.writeMessage(1, (com.google.bigtable.v1.Family) chunk_);
      }
      if (chunkCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) chunk_));
      }
      if (chunkCase_ == 3) {
        output.writeBool(
            3, (boolean)((java.lang.Boolean) chunk_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (chunkCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.google.bigtable.v1.Family) chunk_);
      }
      if (chunkCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) chunk_));
      }
      if (chunkCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              3, (boolean)((java.lang.Boolean) chunk_));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.bigtable.v1.ReadRowsResponse.Chunk)) {
        return super.equals(obj);
      }
      com.google.bigtable.v1.ReadRowsResponse.Chunk other = (com.google.bigtable.v1.ReadRowsResponse.Chunk) obj;

      boolean result = true;
      result = result && getChunkCase().equals(
          other.getChunkCase());
      if (!result) return false;
      switch (chunkCase_) {
        case 1:
          result = result && getRowContents()
              .equals(other.getRowContents());
          break;
        case 2:
          result = result && (getResetRow()
              == other.getResetRow());
          break;
        case 3:
          result = result && (getCommitRow()
              == other.getCommitRow());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (chunkCase_) {
        case 1:
          hash = (37 * hash) + ROW_CONTENTS_FIELD_NUMBER;
          hash = (53 * hash) + getRowContents().hashCode();
          break;
        case 2:
          hash = (37 * hash) + RESET_ROW_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getResetRow());
          break;
        case 3:
          hash = (37 * hash) + COMMIT_ROW_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getCommitRow());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.bigtable.v1.ReadRowsResponse.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.bigtable.v1.ReadRowsResponse.Chunk prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a piece of a row's contents returned as part of the read
     * response stream.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.v1.ReadRowsResponse.Chunk}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.v1.ReadRowsResponse.Chunk)
        com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_Chunk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_Chunk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.bigtable.v1.ReadRowsResponse.Chunk.class, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder.class);
      }

      // Construct using com.google.bigtable.v1.ReadRowsResponse.Chunk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        chunkCase_ = 0;
        chunk_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_Chunk_descriptor;
      }

      public com.google.bigtable.v1.ReadRowsResponse.Chunk getDefaultInstanceForType() {
        return com.google.bigtable.v1.ReadRowsResponse.Chunk.getDefaultInstance();
      }

      public com.google.bigtable.v1.ReadRowsResponse.Chunk build() {
        com.google.bigtable.v1.ReadRowsResponse.Chunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.bigtable.v1.ReadRowsResponse.Chunk buildPartial() {
        com.google.bigtable.v1.ReadRowsResponse.Chunk result = new com.google.bigtable.v1.ReadRowsResponse.Chunk(this);
        if (chunkCase_ == 1) {
          if (rowContentsBuilder_ == null) {
            result.chunk_ = chunk_;
          } else {
            result.chunk_ = rowContentsBuilder_.build();
          }
        }
        if (chunkCase_ == 2) {
          result.chunk_ = chunk_;
        }
        if (chunkCase_ == 3) {
          result.chunk_ = chunk_;
        }
        result.chunkCase_ = chunkCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.bigtable.v1.ReadRowsResponse.Chunk) {
          return mergeFrom((com.google.bigtable.v1.ReadRowsResponse.Chunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.bigtable.v1.ReadRowsResponse.Chunk other) {
        if (other == com.google.bigtable.v1.ReadRowsResponse.Chunk.getDefaultInstance()) return this;
        switch (other.getChunkCase()) {
          case ROW_CONTENTS: {
            mergeRowContents(other.getRowContents());
            break;
          }
          case RESET_ROW: {
            setResetRow(other.getResetRow());
            break;
          }
          case COMMIT_ROW: {
            setCommitRow(other.getCommitRow());
            break;
          }
          case CHUNK_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.bigtable.v1.ReadRowsResponse.Chunk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.bigtable.v1.ReadRowsResponse.Chunk) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int chunkCase_ = 0;
      private java.lang.Object chunk_;
      public ChunkCase
          getChunkCase() {
        return ChunkCase.forNumber(
            chunkCase_);
      }

      public Builder clearChunk() {
        chunkCase_ = 0;
        chunk_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.bigtable.v1.Family, com.google.bigtable.v1.Family.Builder, com.google.bigtable.v1.FamilyOrBuilder> rowContentsBuilder_;
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public com.google.bigtable.v1.Family getRowContents() {
        if (rowContentsBuilder_ == null) {
          if (chunkCase_ == 1) {
            return (com.google.bigtable.v1.Family) chunk_;
          }
          return com.google.bigtable.v1.Family.getDefaultInstance();
        } else {
          if (chunkCase_ == 1) {
            return rowContentsBuilder_.getMessage();
          }
          return com.google.bigtable.v1.Family.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public Builder setRowContents(com.google.bigtable.v1.Family value) {
        if (rowContentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chunk_ = value;
          onChanged();
        } else {
          rowContentsBuilder_.setMessage(value);
        }
        chunkCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public Builder setRowContents(
          com.google.bigtable.v1.Family.Builder builderForValue) {
        if (rowContentsBuilder_ == null) {
          chunk_ = builderForValue.build();
          onChanged();
        } else {
          rowContentsBuilder_.setMessage(builderForValue.build());
        }
        chunkCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public Builder mergeRowContents(com.google.bigtable.v1.Family value) {
        if (rowContentsBuilder_ == null) {
          if (chunkCase_ == 1 &&
              chunk_ != com.google.bigtable.v1.Family.getDefaultInstance()) {
            chunk_ = com.google.bigtable.v1.Family.newBuilder((com.google.bigtable.v1.Family) chunk_)
                .mergeFrom(value).buildPartial();
          } else {
            chunk_ = value;
          }
          onChanged();
        } else {
          if (chunkCase_ == 1) {
            rowContentsBuilder_.mergeFrom(value);
          }
          rowContentsBuilder_.setMessage(value);
        }
        chunkCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public Builder clearRowContents() {
        if (rowContentsBuilder_ == null) {
          if (chunkCase_ == 1) {
            chunkCase_ = 0;
            chunk_ = null;
            onChanged();
          }
        } else {
          if (chunkCase_ == 1) {
            chunkCase_ = 0;
            chunk_ = null;
          }
          rowContentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public com.google.bigtable.v1.Family.Builder getRowContentsBuilder() {
        return getRowContentsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      public com.google.bigtable.v1.FamilyOrBuilder getRowContentsOrBuilder() {
        if ((chunkCase_ == 1) && (rowContentsBuilder_ != null)) {
          return rowContentsBuilder_.getMessageOrBuilder();
        } else {
          if (chunkCase_ == 1) {
            return (com.google.bigtable.v1.Family) chunk_;
          }
          return com.google.bigtable.v1.Family.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A subset of the data from a particular row. As long as no "reset_row"
       * is received in between, multiple "row_contents" from the same row are
       * from the same atomic view of that row, and will be received in the
       * expected family/column/timestamp order.
       * </pre>
       *
       * <code>.google.bigtable.v1.Family row_contents = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.bigtable.v1.Family, com.google.bigtable.v1.Family.Builder, com.google.bigtable.v1.FamilyOrBuilder> 
          getRowContentsFieldBuilder() {
        if (rowContentsBuilder_ == null) {
          if (!(chunkCase_ == 1)) {
            chunk_ = com.google.bigtable.v1.Family.getDefaultInstance();
          }
          rowContentsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.bigtable.v1.Family, com.google.bigtable.v1.Family.Builder, com.google.bigtable.v1.FamilyOrBuilder>(
                  (com.google.bigtable.v1.Family) chunk_,
                  getParentForChildren(),
                  isClean());
          chunk_ = null;
        }
        chunkCase_ = 1;
        onChanged();;
        return rowContentsBuilder_;
      }

      /**
       * <pre>
       * Indicates that the client should drop all previous chunks for
       * "row_key", as it will be re-read from the beginning.
       * </pre>
       *
       * <code>bool reset_row = 2;</code>
       */
      public boolean getResetRow() {
        if (chunkCase_ == 2) {
          return (java.lang.Boolean) chunk_;
        }
        return false;
      }
      /**
       * <pre>
       * Indicates that the client should drop all previous chunks for
       * "row_key", as it will be re-read from the beginning.
       * </pre>
       *
       * <code>bool reset_row = 2;</code>
       */
      public Builder setResetRow(boolean value) {
        chunkCase_ = 2;
        chunk_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates that the client should drop all previous chunks for
       * "row_key", as it will be re-read from the beginning.
       * </pre>
       *
       * <code>bool reset_row = 2;</code>
       */
      public Builder clearResetRow() {
        if (chunkCase_ == 2) {
          chunkCase_ = 0;
          chunk_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Indicates that the client can safely process all previous chunks for
       * "row_key", as its data has been fully read.
       * </pre>
       *
       * <code>bool commit_row = 3;</code>
       */
      public boolean getCommitRow() {
        if (chunkCase_ == 3) {
          return (java.lang.Boolean) chunk_;
        }
        return false;
      }
      /**
       * <pre>
       * Indicates that the client can safely process all previous chunks for
       * "row_key", as its data has been fully read.
       * </pre>
       *
       * <code>bool commit_row = 3;</code>
       */
      public Builder setCommitRow(boolean value) {
        chunkCase_ = 3;
        chunk_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates that the client can safely process all previous chunks for
       * "row_key", as its data has been fully read.
       * </pre>
       *
       * <code>bool commit_row = 3;</code>
       */
      public Builder clearCommitRow() {
        if (chunkCase_ == 3) {
          chunkCase_ = 0;
          chunk_ = null;
          onChanged();
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.bigtable.v1.ReadRowsResponse.Chunk)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadRowsResponse.Chunk)
    private static final com.google.bigtable.v1.ReadRowsResponse.Chunk DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.bigtable.v1.ReadRowsResponse.Chunk();
    }

    public static com.google.bigtable.v1.ReadRowsResponse.Chunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Chunk>
        PARSER = new com.google.protobuf.AbstractParser<Chunk>() {
      public Chunk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Chunk(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Chunk> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Chunk> getParserForType() {
      return PARSER;
    }

    public com.google.bigtable.v1.ReadRowsResponse.Chunk getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int ROW_KEY_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString rowKey_;
  /**
   * <pre>
   * The key of the row for which we're receiving data.
   * Results will be received in increasing row key order, unless
   * "allow_row_interleaving" was specified in the request.
   * </pre>
   *
   * <code>bytes row_key = 1;</code>
   */
  public com.google.protobuf.ByteString getRowKey() {
    return rowKey_;
  }

  public static final int CHUNKS_FIELD_NUMBER = 2;
  private java.util.List<com.google.bigtable.v1.ReadRowsResponse.Chunk> chunks_;
  /**
   * <pre>
   * One or more chunks of the row specified by "row_key".
   * </pre>
   *
   * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
   */
  public java.util.List<com.google.bigtable.v1.ReadRowsResponse.Chunk> getChunksList() {
    return chunks_;
  }
  /**
   * <pre>
   * One or more chunks of the row specified by "row_key".
   * </pre>
   *
   * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
   */
  public java.util.List<? extends com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder> 
      getChunksOrBuilderList() {
    return chunks_;
  }
  /**
   * <pre>
   * One or more chunks of the row specified by "row_key".
   * </pre>
   *
   * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
   */
  public int getChunksCount() {
    return chunks_.size();
  }
  /**
   * <pre>
   * One or more chunks of the row specified by "row_key".
   * </pre>
   *
   * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
   */
  public com.google.bigtable.v1.ReadRowsResponse.Chunk getChunks(int index) {
    return chunks_.get(index);
  }
  /**
   * <pre>
   * One or more chunks of the row specified by "row_key".
   * </pre>
   *
   * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
   */
  public com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder getChunksOrBuilder(
      int index) {
    return chunks_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!rowKey_.isEmpty()) {
      output.writeBytes(1, rowKey_);
    }
    for (int i = 0; i < chunks_.size(); i++) {
      output.writeMessage(2, chunks_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!rowKey_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, rowKey_);
    }
    for (int i = 0; i < chunks_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, chunks_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.bigtable.v1.ReadRowsResponse)) {
      return super.equals(obj);
    }
    com.google.bigtable.v1.ReadRowsResponse other = (com.google.bigtable.v1.ReadRowsResponse) obj;

    boolean result = true;
    result = result && getRowKey()
        .equals(other.getRowKey());
    result = result && getChunksList()
        .equals(other.getChunksList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ROW_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getRowKey().hashCode();
    if (getChunksCount() > 0) {
      hash = (37 * hash) + CHUNKS_FIELD_NUMBER;
      hash = (53 * hash) + getChunksList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.v1.ReadRowsResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.v1.ReadRowsResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Response message for BigtableService.ReadRows.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v1.ReadRowsResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.v1.ReadRowsResponse)
      com.google.bigtable.v1.ReadRowsResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.v1.ReadRowsResponse.class, com.google.bigtable.v1.ReadRowsResponse.Builder.class);
    }

    // Construct using com.google.bigtable.v1.ReadRowsResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getChunksFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      rowKey_ = com.google.protobuf.ByteString.EMPTY;

      if (chunksBuilder_ == null) {
        chunks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        chunksBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.v1.BigtableServiceMessagesProto.internal_static_google_bigtable_v1_ReadRowsResponse_descriptor;
    }

    public com.google.bigtable.v1.ReadRowsResponse getDefaultInstanceForType() {
      return com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance();
    }

    public com.google.bigtable.v1.ReadRowsResponse build() {
      com.google.bigtable.v1.ReadRowsResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.v1.ReadRowsResponse buildPartial() {
      com.google.bigtable.v1.ReadRowsResponse result = new com.google.bigtable.v1.ReadRowsResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.rowKey_ = rowKey_;
      if (chunksBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          chunks_ = java.util.Collections.unmodifiableList(chunks_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.chunks_ = chunks_;
      } else {
        result.chunks_ = chunksBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.v1.ReadRowsResponse) {
        return mergeFrom((com.google.bigtable.v1.ReadRowsResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.v1.ReadRowsResponse other) {
      if (other == com.google.bigtable.v1.ReadRowsResponse.getDefaultInstance()) return this;
      if (other.getRowKey() != com.google.protobuf.ByteString.EMPTY) {
        setRowKey(other.getRowKey());
      }
      if (chunksBuilder_ == null) {
        if (!other.chunks_.isEmpty()) {
          if (chunks_.isEmpty()) {
            chunks_ = other.chunks_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureChunksIsMutable();
            chunks_.addAll(other.chunks_);
          }
          onChanged();
        }
      } else {
        if (!other.chunks_.isEmpty()) {
          if (chunksBuilder_.isEmpty()) {
            chunksBuilder_.dispose();
            chunksBuilder_ = null;
            chunks_ = other.chunks_;
            bitField0_ = (bitField0_ & ~0x00000002);
            chunksBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getChunksFieldBuilder() : null;
          } else {
            chunksBuilder_.addAllMessages(other.chunks_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.v1.ReadRowsResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.v1.ReadRowsResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.ByteString rowKey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * The key of the row for which we're receiving data.
     * Results will be received in increasing row key order, unless
     * "allow_row_interleaving" was specified in the request.
     * </pre>
     *
     * <code>bytes row_key = 1;</code>
     */
    public com.google.protobuf.ByteString getRowKey() {
      return rowKey_;
    }
    /**
     * <pre>
     * The key of the row for which we're receiving data.
     * Results will be received in increasing row key order, unless
     * "allow_row_interleaving" was specified in the request.
     * </pre>
     *
     * <code>bytes row_key = 1;</code>
     */
    public Builder setRowKey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rowKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The key of the row for which we're receiving data.
     * Results will be received in increasing row key order, unless
     * "allow_row_interleaving" was specified in the request.
     * </pre>
     *
     * <code>bytes row_key = 1;</code>
     */
    public Builder clearRowKey() {
      
      rowKey_ = getDefaultInstance().getRowKey();
      onChanged();
      return this;
    }

    private java.util.List<com.google.bigtable.v1.ReadRowsResponse.Chunk> chunks_ =
      java.util.Collections.emptyList();
    private void ensureChunksIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        chunks_ = new java.util.ArrayList<com.google.bigtable.v1.ReadRowsResponse.Chunk>(chunks_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.bigtable.v1.ReadRowsResponse.Chunk, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder, com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder> chunksBuilder_;

    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public java.util.List<com.google.bigtable.v1.ReadRowsResponse.Chunk> getChunksList() {
      if (chunksBuilder_ == null) {
        return java.util.Collections.unmodifiableList(chunks_);
      } else {
        return chunksBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public int getChunksCount() {
      if (chunksBuilder_ == null) {
        return chunks_.size();
      } else {
        return chunksBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public com.google.bigtable.v1.ReadRowsResponse.Chunk getChunks(int index) {
      if (chunksBuilder_ == null) {
        return chunks_.get(index);
      } else {
        return chunksBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder setChunks(
        int index, com.google.bigtable.v1.ReadRowsResponse.Chunk value) {
      if (chunksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChunksIsMutable();
        chunks_.set(index, value);
        onChanged();
      } else {
        chunksBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder setChunks(
        int index, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder builderForValue) {
      if (chunksBuilder_ == null) {
        ensureChunksIsMutable();
        chunks_.set(index, builderForValue.build());
        onChanged();
      } else {
        chunksBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder addChunks(com.google.bigtable.v1.ReadRowsResponse.Chunk value) {
      if (chunksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChunksIsMutable();
        chunks_.add(value);
        onChanged();
      } else {
        chunksBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder addChunks(
        int index, com.google.bigtable.v1.ReadRowsResponse.Chunk value) {
      if (chunksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChunksIsMutable();
        chunks_.add(index, value);
        onChanged();
      } else {
        chunksBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder addChunks(
        com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder builderForValue) {
      if (chunksBuilder_ == null) {
        ensureChunksIsMutable();
        chunks_.add(builderForValue.build());
        onChanged();
      } else {
        chunksBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder addChunks(
        int index, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder builderForValue) {
      if (chunksBuilder_ == null) {
        ensureChunksIsMutable();
        chunks_.add(index, builderForValue.build());
        onChanged();
      } else {
        chunksBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder addAllChunks(
        java.lang.Iterable<? extends com.google.bigtable.v1.ReadRowsResponse.Chunk> values) {
      if (chunksBuilder_ == null) {
        ensureChunksIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, chunks_);
        onChanged();
      } else {
        chunksBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder clearChunks() {
      if (chunksBuilder_ == null) {
        chunks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        chunksBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public Builder removeChunks(int index) {
      if (chunksBuilder_ == null) {
        ensureChunksIsMutable();
        chunks_.remove(index);
        onChanged();
      } else {
        chunksBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder getChunksBuilder(
        int index) {
      return getChunksFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder getChunksOrBuilder(
        int index) {
      if (chunksBuilder_ == null) {
        return chunks_.get(index);  } else {
        return chunksBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public java.util.List<? extends com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder> 
         getChunksOrBuilderList() {
      if (chunksBuilder_ != null) {
        return chunksBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(chunks_);
      }
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder addChunksBuilder() {
      return getChunksFieldBuilder().addBuilder(
          com.google.bigtable.v1.ReadRowsResponse.Chunk.getDefaultInstance());
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder addChunksBuilder(
        int index) {
      return getChunksFieldBuilder().addBuilder(
          index, com.google.bigtable.v1.ReadRowsResponse.Chunk.getDefaultInstance());
    }
    /**
     * <pre>
     * One or more chunks of the row specified by "row_key".
     * </pre>
     *
     * <code>repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;</code>
     */
    public java.util.List<com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder> 
         getChunksBuilderList() {
      return getChunksFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.bigtable.v1.ReadRowsResponse.Chunk, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder, com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder> 
        getChunksFieldBuilder() {
      if (chunksBuilder_ == null) {
        chunksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.bigtable.v1.ReadRowsResponse.Chunk, com.google.bigtable.v1.ReadRowsResponse.Chunk.Builder, com.google.bigtable.v1.ReadRowsResponse.ChunkOrBuilder>(
                chunks_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        chunks_ = null;
      }
      return chunksBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.v1.ReadRowsResponse)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.v1.ReadRowsResponse)
  private static final com.google.bigtable.v1.ReadRowsResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.v1.ReadRowsResponse();
  }

  public static com.google.bigtable.v1.ReadRowsResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReadRowsResponse>
      PARSER = new com.google.protobuf.AbstractParser<ReadRowsResponse>() {
    public ReadRowsResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReadRowsResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ReadRowsResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReadRowsResponse> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.v1.ReadRowsResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

