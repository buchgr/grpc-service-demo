// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

package com.google.genomics.v1;

/**
 * <pre>
 * The variant data export request.
 * </pre>
 *
 * Protobuf type {@code google.genomics.v1.ExportVariantSetRequest}
 */
public  final class ExportVariantSetRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.genomics.v1.ExportVariantSetRequest)
    ExportVariantSetRequestOrBuilder {
  // Use ExportVariantSetRequest.newBuilder() to construct.
  private ExportVariantSetRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExportVariantSetRequest() {
    variantSetId_ = "";
    callSetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    projectId_ = "";
    format_ = 0;
    bigqueryDataset_ = "";
    bigqueryTable_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ExportVariantSetRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            variantSetId_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              callSetIds_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            callSetIds_.add(s);
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            projectId_ = s;
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            format_ = rawValue;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            bigqueryDataset_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            bigqueryTable_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        callSetIds_ = callSetIds_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_ExportVariantSetRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_ExportVariantSetRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.genomics.v1.ExportVariantSetRequest.class, com.google.genomics.v1.ExportVariantSetRequest.Builder.class);
  }

  /**
   * Protobuf enum {@code google.genomics.v1.ExportVariantSetRequest.Format}
   */
  public enum Format
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FORMAT_UNSPECIFIED = 0;</code>
     */
    FORMAT_UNSPECIFIED(0),
    /**
     * <pre>
     * Export the data to Google BigQuery.
     * </pre>
     *
     * <code>FORMAT_BIGQUERY = 1;</code>
     */
    FORMAT_BIGQUERY(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>FORMAT_UNSPECIFIED = 0;</code>
     */
    public static final int FORMAT_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Export the data to Google BigQuery.
     * </pre>
     *
     * <code>FORMAT_BIGQUERY = 1;</code>
     */
    public static final int FORMAT_BIGQUERY_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Format valueOf(int value) {
      return forNumber(value);
    }

    public static Format forNumber(int value) {
      switch (value) {
        case 0: return FORMAT_UNSPECIFIED;
        case 1: return FORMAT_BIGQUERY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Format> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Format>() {
            public Format findValueByNumber(int number) {
              return Format.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.genomics.v1.ExportVariantSetRequest.getDescriptor().getEnumTypes().get(0);
    }

    private static final Format[] VALUES = values();

    public static Format valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Format(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.genomics.v1.ExportVariantSetRequest.Format)
  }

  private int bitField0_;
  public static final int VARIANT_SET_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object variantSetId_;
  /**
   * <pre>
   * Required. The ID of the variant set that contains variant data which
   * should be exported. The caller must have READ access to this variant set.
   * </pre>
   *
   * <code>string variant_set_id = 1;</code>
   */
  public java.lang.String getVariantSetId() {
    java.lang.Object ref = variantSetId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      variantSetId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The ID of the variant set that contains variant data which
   * should be exported. The caller must have READ access to this variant set.
   * </pre>
   *
   * <code>string variant_set_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getVariantSetIdBytes() {
    java.lang.Object ref = variantSetId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      variantSetId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CALL_SET_IDS_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList callSetIds_;
  /**
   * <pre>
   * If provided, only variant call information from the specified call sets
   * will be exported. By default all variant calls are exported.
   * </pre>
   *
   * <code>repeated string call_set_ids = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getCallSetIdsList() {
    return callSetIds_;
  }
  /**
   * <pre>
   * If provided, only variant call information from the specified call sets
   * will be exported. By default all variant calls are exported.
   * </pre>
   *
   * <code>repeated string call_set_ids = 2;</code>
   */
  public int getCallSetIdsCount() {
    return callSetIds_.size();
  }
  /**
   * <pre>
   * If provided, only variant call information from the specified call sets
   * will be exported. By default all variant calls are exported.
   * </pre>
   *
   * <code>repeated string call_set_ids = 2;</code>
   */
  public java.lang.String getCallSetIds(int index) {
    return callSetIds_.get(index);
  }
  /**
   * <pre>
   * If provided, only variant call information from the specified call sets
   * will be exported. By default all variant calls are exported.
   * </pre>
   *
   * <code>repeated string call_set_ids = 2;</code>
   */
  public com.google.protobuf.ByteString
      getCallSetIdsBytes(int index) {
    return callSetIds_.getByteString(index);
  }

  public static final int PROJECT_ID_FIELD_NUMBER = 3;
  private volatile java.lang.Object projectId_;
  /**
   * <pre>
   * Required. The Google Cloud project ID that owns the destination
   * BigQuery dataset. The caller must have WRITE access to this project.  This
   * project will also own the resulting export job.
   * </pre>
   *
   * <code>string project_id = 3;</code>
   */
  public java.lang.String getProjectId() {
    java.lang.Object ref = projectId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      projectId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The Google Cloud project ID that owns the destination
   * BigQuery dataset. The caller must have WRITE access to this project.  This
   * project will also own the resulting export job.
   * </pre>
   *
   * <code>string project_id = 3;</code>
   */
  public com.google.protobuf.ByteString
      getProjectIdBytes() {
    java.lang.Object ref = projectId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      projectId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FORMAT_FIELD_NUMBER = 4;
  private int format_;
  /**
   * <pre>
   * The format for the exported data.
   * </pre>
   *
   * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
   */
  public int getFormatValue() {
    return format_;
  }
  /**
   * <pre>
   * The format for the exported data.
   * </pre>
   *
   * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
   */
  public com.google.genomics.v1.ExportVariantSetRequest.Format getFormat() {
    com.google.genomics.v1.ExportVariantSetRequest.Format result = com.google.genomics.v1.ExportVariantSetRequest.Format.valueOf(format_);
    return result == null ? com.google.genomics.v1.ExportVariantSetRequest.Format.UNRECOGNIZED : result;
  }

  public static final int BIGQUERY_DATASET_FIELD_NUMBER = 5;
  private volatile java.lang.Object bigqueryDataset_;
  /**
   * <pre>
   * Required. The BigQuery dataset to export data to. This dataset must already
   * exist. Note that this is distinct from the Genomics concept of "dataset".
   * </pre>
   *
   * <code>string bigquery_dataset = 5;</code>
   */
  public java.lang.String getBigqueryDataset() {
    java.lang.Object ref = bigqueryDataset_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      bigqueryDataset_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The BigQuery dataset to export data to. This dataset must already
   * exist. Note that this is distinct from the Genomics concept of "dataset".
   * </pre>
   *
   * <code>string bigquery_dataset = 5;</code>
   */
  public com.google.protobuf.ByteString
      getBigqueryDatasetBytes() {
    java.lang.Object ref = bigqueryDataset_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      bigqueryDataset_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BIGQUERY_TABLE_FIELD_NUMBER = 6;
  private volatile java.lang.Object bigqueryTable_;
  /**
   * <pre>
   * Required. The BigQuery table to export data to.
   * If the table doesn't exist, it will be created. If it already exists, it
   * will be overwritten.
   * </pre>
   *
   * <code>string bigquery_table = 6;</code>
   */
  public java.lang.String getBigqueryTable() {
    java.lang.Object ref = bigqueryTable_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      bigqueryTable_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The BigQuery table to export data to.
   * If the table doesn't exist, it will be created. If it already exists, it
   * will be overwritten.
   * </pre>
   *
   * <code>string bigquery_table = 6;</code>
   */
  public com.google.protobuf.ByteString
      getBigqueryTableBytes() {
    java.lang.Object ref = bigqueryTable_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      bigqueryTable_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getVariantSetIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, variantSetId_);
    }
    for (int i = 0; i < callSetIds_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, callSetIds_.getRaw(i));
    }
    if (!getProjectIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, projectId_);
    }
    if (format_ != com.google.genomics.v1.ExportVariantSetRequest.Format.FORMAT_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, format_);
    }
    if (!getBigqueryDatasetBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, bigqueryDataset_);
    }
    if (!getBigqueryTableBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, bigqueryTable_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getVariantSetIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, variantSetId_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < callSetIds_.size(); i++) {
        dataSize += computeStringSizeNoTag(callSetIds_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCallSetIdsList().size();
    }
    if (!getProjectIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, projectId_);
    }
    if (format_ != com.google.genomics.v1.ExportVariantSetRequest.Format.FORMAT_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, format_);
    }
    if (!getBigqueryDatasetBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, bigqueryDataset_);
    }
    if (!getBigqueryTableBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, bigqueryTable_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.genomics.v1.ExportVariantSetRequest)) {
      return super.equals(obj);
    }
    com.google.genomics.v1.ExportVariantSetRequest other = (com.google.genomics.v1.ExportVariantSetRequest) obj;

    boolean result = true;
    result = result && getVariantSetId()
        .equals(other.getVariantSetId());
    result = result && getCallSetIdsList()
        .equals(other.getCallSetIdsList());
    result = result && getProjectId()
        .equals(other.getProjectId());
    result = result && format_ == other.format_;
    result = result && getBigqueryDataset()
        .equals(other.getBigqueryDataset());
    result = result && getBigqueryTable()
        .equals(other.getBigqueryTable());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VARIANT_SET_ID_FIELD_NUMBER;
    hash = (53 * hash) + getVariantSetId().hashCode();
    if (getCallSetIdsCount() > 0) {
      hash = (37 * hash) + CALL_SET_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getCallSetIdsList().hashCode();
    }
    hash = (37 * hash) + PROJECT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getProjectId().hashCode();
    hash = (37 * hash) + FORMAT_FIELD_NUMBER;
    hash = (53 * hash) + format_;
    hash = (37 * hash) + BIGQUERY_DATASET_FIELD_NUMBER;
    hash = (53 * hash) + getBigqueryDataset().hashCode();
    hash = (37 * hash) + BIGQUERY_TABLE_FIELD_NUMBER;
    hash = (53 * hash) + getBigqueryTable().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.ExportVariantSetRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.genomics.v1.ExportVariantSetRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The variant data export request.
   * </pre>
   *
   * Protobuf type {@code google.genomics.v1.ExportVariantSetRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.genomics.v1.ExportVariantSetRequest)
      com.google.genomics.v1.ExportVariantSetRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_ExportVariantSetRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_ExportVariantSetRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.genomics.v1.ExportVariantSetRequest.class, com.google.genomics.v1.ExportVariantSetRequest.Builder.class);
    }

    // Construct using com.google.genomics.v1.ExportVariantSetRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      variantSetId_ = "";

      callSetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      projectId_ = "";

      format_ = 0;

      bigqueryDataset_ = "";

      bigqueryTable_ = "";

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_ExportVariantSetRequest_descriptor;
    }

    public com.google.genomics.v1.ExportVariantSetRequest getDefaultInstanceForType() {
      return com.google.genomics.v1.ExportVariantSetRequest.getDefaultInstance();
    }

    public com.google.genomics.v1.ExportVariantSetRequest build() {
      com.google.genomics.v1.ExportVariantSetRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.genomics.v1.ExportVariantSetRequest buildPartial() {
      com.google.genomics.v1.ExportVariantSetRequest result = new com.google.genomics.v1.ExportVariantSetRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.variantSetId_ = variantSetId_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        callSetIds_ = callSetIds_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.callSetIds_ = callSetIds_;
      result.projectId_ = projectId_;
      result.format_ = format_;
      result.bigqueryDataset_ = bigqueryDataset_;
      result.bigqueryTable_ = bigqueryTable_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.genomics.v1.ExportVariantSetRequest) {
        return mergeFrom((com.google.genomics.v1.ExportVariantSetRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.genomics.v1.ExportVariantSetRequest other) {
      if (other == com.google.genomics.v1.ExportVariantSetRequest.getDefaultInstance()) return this;
      if (!other.getVariantSetId().isEmpty()) {
        variantSetId_ = other.variantSetId_;
        onChanged();
      }
      if (!other.callSetIds_.isEmpty()) {
        if (callSetIds_.isEmpty()) {
          callSetIds_ = other.callSetIds_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureCallSetIdsIsMutable();
          callSetIds_.addAll(other.callSetIds_);
        }
        onChanged();
      }
      if (!other.getProjectId().isEmpty()) {
        projectId_ = other.projectId_;
        onChanged();
      }
      if (other.format_ != 0) {
        setFormatValue(other.getFormatValue());
      }
      if (!other.getBigqueryDataset().isEmpty()) {
        bigqueryDataset_ = other.bigqueryDataset_;
        onChanged();
      }
      if (!other.getBigqueryTable().isEmpty()) {
        bigqueryTable_ = other.bigqueryTable_;
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.genomics.v1.ExportVariantSetRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.genomics.v1.ExportVariantSetRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object variantSetId_ = "";
    /**
     * <pre>
     * Required. The ID of the variant set that contains variant data which
     * should be exported. The caller must have READ access to this variant set.
     * </pre>
     *
     * <code>string variant_set_id = 1;</code>
     */
    public java.lang.String getVariantSetId() {
      java.lang.Object ref = variantSetId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        variantSetId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The ID of the variant set that contains variant data which
     * should be exported. The caller must have READ access to this variant set.
     * </pre>
     *
     * <code>string variant_set_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getVariantSetIdBytes() {
      java.lang.Object ref = variantSetId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        variantSetId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The ID of the variant set that contains variant data which
     * should be exported. The caller must have READ access to this variant set.
     * </pre>
     *
     * <code>string variant_set_id = 1;</code>
     */
    public Builder setVariantSetId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      variantSetId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The ID of the variant set that contains variant data which
     * should be exported. The caller must have READ access to this variant set.
     * </pre>
     *
     * <code>string variant_set_id = 1;</code>
     */
    public Builder clearVariantSetId() {
      
      variantSetId_ = getDefaultInstance().getVariantSetId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The ID of the variant set that contains variant data which
     * should be exported. The caller must have READ access to this variant set.
     * </pre>
     *
     * <code>string variant_set_id = 1;</code>
     */
    public Builder setVariantSetIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      variantSetId_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList callSetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCallSetIdsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        callSetIds_ = new com.google.protobuf.LazyStringArrayList(callSetIds_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCallSetIdsList() {
      return callSetIds_.getUnmodifiableView();
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public int getCallSetIdsCount() {
      return callSetIds_.size();
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public java.lang.String getCallSetIds(int index) {
      return callSetIds_.get(index);
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCallSetIdsBytes(int index) {
      return callSetIds_.getByteString(index);
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public Builder setCallSetIds(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCallSetIdsIsMutable();
      callSetIds_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public Builder addCallSetIds(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCallSetIdsIsMutable();
      callSetIds_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public Builder addAllCallSetIds(
        java.lang.Iterable<java.lang.String> values) {
      ensureCallSetIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, callSetIds_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public Builder clearCallSetIds() {
      callSetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If provided, only variant call information from the specified call sets
     * will be exported. By default all variant calls are exported.
     * </pre>
     *
     * <code>repeated string call_set_ids = 2;</code>
     */
    public Builder addCallSetIdsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCallSetIdsIsMutable();
      callSetIds_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object projectId_ = "";
    /**
     * <pre>
     * Required. The Google Cloud project ID that owns the destination
     * BigQuery dataset. The caller must have WRITE access to this project.  This
     * project will also own the resulting export job.
     * </pre>
     *
     * <code>string project_id = 3;</code>
     */
    public java.lang.String getProjectId() {
      java.lang.Object ref = projectId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        projectId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The Google Cloud project ID that owns the destination
     * BigQuery dataset. The caller must have WRITE access to this project.  This
     * project will also own the resulting export job.
     * </pre>
     *
     * <code>string project_id = 3;</code>
     */
    public com.google.protobuf.ByteString
        getProjectIdBytes() {
      java.lang.Object ref = projectId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        projectId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The Google Cloud project ID that owns the destination
     * BigQuery dataset. The caller must have WRITE access to this project.  This
     * project will also own the resulting export job.
     * </pre>
     *
     * <code>string project_id = 3;</code>
     */
    public Builder setProjectId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      projectId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The Google Cloud project ID that owns the destination
     * BigQuery dataset. The caller must have WRITE access to this project.  This
     * project will also own the resulting export job.
     * </pre>
     *
     * <code>string project_id = 3;</code>
     */
    public Builder clearProjectId() {
      
      projectId_ = getDefaultInstance().getProjectId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The Google Cloud project ID that owns the destination
     * BigQuery dataset. The caller must have WRITE access to this project.  This
     * project will also own the resulting export job.
     * </pre>
     *
     * <code>string project_id = 3;</code>
     */
    public Builder setProjectIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      projectId_ = value;
      onChanged();
      return this;
    }

    private int format_ = 0;
    /**
     * <pre>
     * The format for the exported data.
     * </pre>
     *
     * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
     */
    public int getFormatValue() {
      return format_;
    }
    /**
     * <pre>
     * The format for the exported data.
     * </pre>
     *
     * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
     */
    public Builder setFormatValue(int value) {
      format_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The format for the exported data.
     * </pre>
     *
     * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
     */
    public com.google.genomics.v1.ExportVariantSetRequest.Format getFormat() {
      com.google.genomics.v1.ExportVariantSetRequest.Format result = com.google.genomics.v1.ExportVariantSetRequest.Format.valueOf(format_);
      return result == null ? com.google.genomics.v1.ExportVariantSetRequest.Format.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The format for the exported data.
     * </pre>
     *
     * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
     */
    public Builder setFormat(com.google.genomics.v1.ExportVariantSetRequest.Format value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      format_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The format for the exported data.
     * </pre>
     *
     * <code>.google.genomics.v1.ExportVariantSetRequest.Format format = 4;</code>
     */
    public Builder clearFormat() {
      
      format_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object bigqueryDataset_ = "";
    /**
     * <pre>
     * Required. The BigQuery dataset to export data to. This dataset must already
     * exist. Note that this is distinct from the Genomics concept of "dataset".
     * </pre>
     *
     * <code>string bigquery_dataset = 5;</code>
     */
    public java.lang.String getBigqueryDataset() {
      java.lang.Object ref = bigqueryDataset_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bigqueryDataset_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The BigQuery dataset to export data to. This dataset must already
     * exist. Note that this is distinct from the Genomics concept of "dataset".
     * </pre>
     *
     * <code>string bigquery_dataset = 5;</code>
     */
    public com.google.protobuf.ByteString
        getBigqueryDatasetBytes() {
      java.lang.Object ref = bigqueryDataset_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bigqueryDataset_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The BigQuery dataset to export data to. This dataset must already
     * exist. Note that this is distinct from the Genomics concept of "dataset".
     * </pre>
     *
     * <code>string bigquery_dataset = 5;</code>
     */
    public Builder setBigqueryDataset(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      bigqueryDataset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The BigQuery dataset to export data to. This dataset must already
     * exist. Note that this is distinct from the Genomics concept of "dataset".
     * </pre>
     *
     * <code>string bigquery_dataset = 5;</code>
     */
    public Builder clearBigqueryDataset() {
      
      bigqueryDataset_ = getDefaultInstance().getBigqueryDataset();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The BigQuery dataset to export data to. This dataset must already
     * exist. Note that this is distinct from the Genomics concept of "dataset".
     * </pre>
     *
     * <code>string bigquery_dataset = 5;</code>
     */
    public Builder setBigqueryDatasetBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      bigqueryDataset_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object bigqueryTable_ = "";
    /**
     * <pre>
     * Required. The BigQuery table to export data to.
     * If the table doesn't exist, it will be created. If it already exists, it
     * will be overwritten.
     * </pre>
     *
     * <code>string bigquery_table = 6;</code>
     */
    public java.lang.String getBigqueryTable() {
      java.lang.Object ref = bigqueryTable_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bigqueryTable_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The BigQuery table to export data to.
     * If the table doesn't exist, it will be created. If it already exists, it
     * will be overwritten.
     * </pre>
     *
     * <code>string bigquery_table = 6;</code>
     */
    public com.google.protobuf.ByteString
        getBigqueryTableBytes() {
      java.lang.Object ref = bigqueryTable_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bigqueryTable_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The BigQuery table to export data to.
     * If the table doesn't exist, it will be created. If it already exists, it
     * will be overwritten.
     * </pre>
     *
     * <code>string bigquery_table = 6;</code>
     */
    public Builder setBigqueryTable(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      bigqueryTable_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The BigQuery table to export data to.
     * If the table doesn't exist, it will be created. If it already exists, it
     * will be overwritten.
     * </pre>
     *
     * <code>string bigquery_table = 6;</code>
     */
    public Builder clearBigqueryTable() {
      
      bigqueryTable_ = getDefaultInstance().getBigqueryTable();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The BigQuery table to export data to.
     * If the table doesn't exist, it will be created. If it already exists, it
     * will be overwritten.
     * </pre>
     *
     * <code>string bigquery_table = 6;</code>
     */
    public Builder setBigqueryTableBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      bigqueryTable_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.genomics.v1.ExportVariantSetRequest)
  }

  // @@protoc_insertion_point(class_scope:google.genomics.v1.ExportVariantSetRequest)
  private static final com.google.genomics.v1.ExportVariantSetRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.genomics.v1.ExportVariantSetRequest();
  }

  public static com.google.genomics.v1.ExportVariantSetRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExportVariantSetRequest>
      PARSER = new com.google.protobuf.AbstractParser<ExportVariantSetRequest>() {
    public ExportVariantSetRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExportVariantSetRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ExportVariantSetRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ExportVariantSetRequest> getParserForType() {
    return PARSER;
  }

  public com.google.genomics.v1.ExportVariantSetRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

