// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/tracing/trace.proto

package com.google.tracing.v1;

public interface SpanOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.tracing.v1.Span)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Identifier for the span. Must be a 64-bit integer other than 0 and
   * unique within a trace.
   * </pre>
   *
   * <code>fixed64 id = 1;</code>
   */
  long getId();

  /**
   * <pre>
   * Name of the span. The span name is sanitized and displayed in the
   * Stackdriver Trace tool in the {% dynamic print site_values.console_name %}.
   * The name may be a method name or some other per-call site name.
   * For the same executable and the same call point, a best practice is
   * to use a consistent name, which makes it easier to correlate
   * cross-trace spans.
   * </pre>
   *
   * <code>string name = 2;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * Name of the span. The span name is sanitized and displayed in the
   * Stackdriver Trace tool in the {% dynamic print site_values.console_name %}.
   * The name may be a method name or some other per-call site name.
   * For the same executable and the same call point, a best practice is
   * to use a consistent name, which makes it easier to correlate
   * cross-trace spans.
   * </pre>
   *
   * <code>string name = 2;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * ID of parent span. 0 or missing if this is a root span.
   * </pre>
   *
   * <code>fixed64 parent_id = 3;</code>
   */
  long getParentId();

  /**
   * <pre>
   * Local machine clock in nanoseconds from the UNIX epoch,
   * at which span execution started.
   * On the server side these are the times when the server application
   * handler starts running.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_start_time = 4;</code>
   */
  boolean hasLocalStartTime();
  /**
   * <pre>
   * Local machine clock in nanoseconds from the UNIX epoch,
   * at which span execution started.
   * On the server side these are the times when the server application
   * handler starts running.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_start_time = 4;</code>
   */
  com.google.protobuf.Timestamp getLocalStartTime();
  /**
   * <pre>
   * Local machine clock in nanoseconds from the UNIX epoch,
   * at which span execution started.
   * On the server side these are the times when the server application
   * handler starts running.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_start_time = 4;</code>
   */
  com.google.protobuf.TimestampOrBuilder getLocalStartTimeOrBuilder();

  /**
   * <pre>
   * Local machine clock in nanoseconds from the UNIX epoch,
   * at which span execution ended.
   * On the server side these are the times when the server application
   * handler finishes running.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_end_time = 5;</code>
   */
  boolean hasLocalEndTime();
  /**
   * <pre>
   * Local machine clock in nanoseconds from the UNIX epoch,
   * at which span execution ended.
   * On the server side these are the times when the server application
   * handler finishes running.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_end_time = 5;</code>
   */
  com.google.protobuf.Timestamp getLocalEndTime();
  /**
   * <pre>
   * Local machine clock in nanoseconds from the UNIX epoch,
   * at which span execution ended.
   * On the server side these are the times when the server application
   * handler finishes running.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_end_time = 5;</code>
   */
  com.google.protobuf.TimestampOrBuilder getLocalEndTimeOrBuilder();

  /**
   * <pre>
   * Properties of a span. Labels at the span level.
   * E.g.
   * "/instance_id": "my-instance"
   * "/zone": "us-central1-a"
   * "/grpc/peer_address": "ip:port" (dns, etc.)
   * "/grpc/deadline": "Duration"
   * "/http/user_agent"
   * "/http/request_bytes": 300
   * "/http/response_bytes": 1200
   * "/http/url": google.com/apis
   * "/pid"
   * "abc.com/mylabel": "my label value"
   * </pre>
   *
   * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * Properties of a span. Labels at the span level.
   * E.g.
   * "/instance_id": "my-instance"
   * "/zone": "us-central1-a"
   * "/grpc/peer_address": "ip:port" (dns, etc.)
   * "/grpc/deadline": "Duration"
   * "/http/user_agent"
   * "/http/request_bytes": 300
   * "/http/response_bytes": 1200
   * "/http/url": google.com/apis
   * "/pid"
   * "abc.com/mylabel": "my label value"
   * </pre>
   *
   * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
   */
  boolean containsLabels(
      java.lang.String key);
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.tracing.v1.LabelValue>
  getLabels();
  /**
   * <pre>
   * Properties of a span. Labels at the span level.
   * E.g.
   * "/instance_id": "my-instance"
   * "/zone": "us-central1-a"
   * "/grpc/peer_address": "ip:port" (dns, etc.)
   * "/grpc/deadline": "Duration"
   * "/http/user_agent"
   * "/http/request_bytes": 300
   * "/http/response_bytes": 1200
   * "/http/url": google.com/apis
   * "/pid"
   * "abc.com/mylabel": "my label value"
   * </pre>
   *
   * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
   */
  java.util.Map<java.lang.String, com.google.tracing.v1.LabelValue>
  getLabelsMap();
  /**
   * <pre>
   * Properties of a span. Labels at the span level.
   * E.g.
   * "/instance_id": "my-instance"
   * "/zone": "us-central1-a"
   * "/grpc/peer_address": "ip:port" (dns, etc.)
   * "/grpc/deadline": "Duration"
   * "/http/user_agent"
   * "/http/request_bytes": 300
   * "/http/response_bytes": 1200
   * "/http/url": google.com/apis
   * "/pid"
   * "abc.com/mylabel": "my label value"
   * </pre>
   *
   * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
   */

  com.google.tracing.v1.LabelValue getLabelsOrDefault(
      java.lang.String key,
      com.google.tracing.v1.LabelValue defaultValue);
  /**
   * <pre>
   * Properties of a span. Labels at the span level.
   * E.g.
   * "/instance_id": "my-instance"
   * "/zone": "us-central1-a"
   * "/grpc/peer_address": "ip:port" (dns, etc.)
   * "/grpc/deadline": "Duration"
   * "/http/user_agent"
   * "/http/request_bytes": 300
   * "/http/response_bytes": 1200
   * "/http/url": google.com/apis
   * "/pid"
   * "abc.com/mylabel": "my label value"
   * </pre>
   *
   * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
   */

  com.google.tracing.v1.LabelValue getLabelsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Stack trace captured at the start of the span. This is optional.
   * </pre>
   *
   * <code>.google.tracing.v1.StackTrace stack_trace = 7;</code>
   */
  boolean hasStackTrace();
  /**
   * <pre>
   * Stack trace captured at the start of the span. This is optional.
   * </pre>
   *
   * <code>.google.tracing.v1.StackTrace stack_trace = 7;</code>
   */
  com.google.tracing.v1.StackTrace getStackTrace();
  /**
   * <pre>
   * Stack trace captured at the start of the span. This is optional.
   * </pre>
   *
   * <code>.google.tracing.v1.StackTrace stack_trace = 7;</code>
   */
  com.google.tracing.v1.StackTraceOrBuilder getStackTraceOrBuilder();

  /**
   * <pre>
   * A collection of time-stamped events.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
   */
  java.util.List<com.google.tracing.v1.Span.TimeEvent> 
      getTimeEventsList();
  /**
   * <pre>
   * A collection of time-stamped events.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
   */
  com.google.tracing.v1.Span.TimeEvent getTimeEvents(int index);
  /**
   * <pre>
   * A collection of time-stamped events.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
   */
  int getTimeEventsCount();
  /**
   * <pre>
   * A collection of time-stamped events.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
   */
  java.util.List<? extends com.google.tracing.v1.Span.TimeEventOrBuilder> 
      getTimeEventsOrBuilderList();
  /**
   * <pre>
   * A collection of time-stamped events.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
   */
  com.google.tracing.v1.Span.TimeEventOrBuilder getTimeEventsOrBuilder(
      int index);

  /**
   * <pre>
   * A collection of links.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
   */
  java.util.List<com.google.tracing.v1.Span.Link> 
      getLinksList();
  /**
   * <pre>
   * A collection of links.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
   */
  com.google.tracing.v1.Span.Link getLinks(int index);
  /**
   * <pre>
   * A collection of links.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
   */
  int getLinksCount();
  /**
   * <pre>
   * A collection of links.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
   */
  java.util.List<? extends com.google.tracing.v1.Span.LinkOrBuilder> 
      getLinksOrBuilderList();
  /**
   * <pre>
   * A collection of links.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
   */
  com.google.tracing.v1.Span.LinkOrBuilder getLinksOrBuilder(
      int index);

  /**
   * <pre>
   * The final status of the Span. This is optional.
   * </pre>
   *
   * <code>.google.rpc.Status status = 10;</code>
   */
  boolean hasStatus();
  /**
   * <pre>
   * The final status of the Span. This is optional.
   * </pre>
   *
   * <code>.google.rpc.Status status = 10;</code>
   */
  com.google.rpc.Status getStatus();
  /**
   * <pre>
   * The final status of the Span. This is optional.
   * </pre>
   *
   * <code>.google.rpc.Status status = 10;</code>
   */
  com.google.rpc.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * True if this Span has a remote parent (is an RPC server Span).
   * </pre>
   *
   * <code>bool has_remote_parent = 11;</code>
   */
  boolean getHasRemoteParent();
}
