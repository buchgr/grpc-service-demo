// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/tracing/trace.proto

package com.google.tracing.v1;

public interface StackTraceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.tracing.v1.StackTrace)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  java.util.List<com.google.tracing.v1.StackTrace.StackFrame> 
      getStackFrameList();
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  com.google.tracing.v1.StackTrace.StackFrame getStackFrame(int index);
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  int getStackFrameCount();
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  java.util.List<? extends com.google.tracing.v1.StackTrace.StackFrameOrBuilder> 
      getStackFrameOrBuilderList();
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  com.google.tracing.v1.StackTrace.StackFrameOrBuilder getStackFrameOrBuilder(
      int index);

  /**
   * <pre>
   * User can choose to use his own hash function to hash large labels to save
   * network bandwidth and storage.
   * Typical usage is to pass both initially to inform the storage of the
   * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
   * User shall verify the hash value is successfully stored.
   * </pre>
   *
   * <code>uint64 stack_trace_hash_id = 2;</code>
   */
  long getStackTraceHashId();
}
