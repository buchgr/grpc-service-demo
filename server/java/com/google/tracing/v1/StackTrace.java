// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/tracing/trace.proto

package com.google.tracing.v1;

/**
 * Protobuf type {@code google.tracing.v1.StackTrace}
 */
public  final class StackTrace extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.tracing.v1.StackTrace)
    StackTraceOrBuilder {
  // Use StackTrace.newBuilder() to construct.
  private StackTrace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StackTrace() {
    stackFrame_ = java.util.Collections.emptyList();
    stackTraceHashId_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private StackTrace(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              stackFrame_ = new java.util.ArrayList<com.google.tracing.v1.StackTrace.StackFrame>();
              mutable_bitField0_ |= 0x00000001;
            }
            stackFrame_.add(
                input.readMessage(com.google.tracing.v1.StackTrace.StackFrame.parser(), extensionRegistry));
            break;
          }
          case 16: {

            stackTraceHashId_ = input.readUInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        stackFrame_ = java.util.Collections.unmodifiableList(stackFrame_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.tracing.v1.StackTrace.class, com.google.tracing.v1.StackTrace.Builder.class);
  }

  public interface StackFrameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.tracing.v1.StackTrace.StackFrame)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    java.lang.String getFunctionName();
    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getFunctionNameBytes();

    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    java.lang.String getOrigFunctionName();
    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getOrigFunctionNameBytes();

    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    java.lang.String getFileName();
    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    com.google.protobuf.ByteString
        getFileNameBytes();

    /**
     * <pre>
     * Line number of the frame.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    long getLineNumber();

    /**
     * <pre>
     * Column number is important in JavaScript(anonymous functions),
     * Might not be available in some languages.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    long getColumnNumber();

    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    boolean hasLoadModule();
    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    com.google.tracing.v1.Module getLoadModule();
    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    com.google.tracing.v1.ModuleOrBuilder getLoadModuleOrBuilder();

    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    java.lang.String getSourceVersion();
    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    com.google.protobuf.ByteString
        getSourceVersionBytes();
  }
  /**
   * <pre>
   * Presents a single stack frame in a stack trace.
   * </pre>
   *
   * Protobuf type {@code google.tracing.v1.StackTrace.StackFrame}
   */
  public  static final class StackFrame extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.tracing.v1.StackTrace.StackFrame)
      StackFrameOrBuilder {
    // Use StackFrame.newBuilder() to construct.
    private StackFrame(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StackFrame() {
      functionName_ = "";
      origFunctionName_ = "";
      fileName_ = "";
      lineNumber_ = 0L;
      columnNumber_ = 0L;
      sourceVersion_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private StackFrame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              functionName_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              origFunctionName_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              fileName_ = s;
              break;
            }
            case 32: {

              lineNumber_ = input.readInt64();
              break;
            }
            case 40: {

              columnNumber_ = input.readInt64();
              break;
            }
            case 50: {
              com.google.tracing.v1.Module.Builder subBuilder = null;
              if (loadModule_ != null) {
                subBuilder = loadModule_.toBuilder();
              }
              loadModule_ = input.readMessage(com.google.tracing.v1.Module.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loadModule_);
                loadModule_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              sourceVersion_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_StackFrame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_StackFrame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.tracing.v1.StackTrace.StackFrame.class, com.google.tracing.v1.StackTrace.StackFrame.Builder.class);
    }

    public static final int FUNCTION_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object functionName_;
    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    public java.lang.String getFunctionName() {
      java.lang.Object ref = functionName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        functionName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFunctionNameBytes() {
      java.lang.Object ref = functionName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        functionName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ORIG_FUNCTION_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object origFunctionName_;
    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    public java.lang.String getOrigFunctionName() {
      java.lang.Object ref = origFunctionName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        origFunctionName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getOrigFunctionNameBytes() {
      java.lang.Object ref = origFunctionName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        origFunctionName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FILE_NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object fileName_;
    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fileName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LINE_NUMBER_FIELD_NUMBER = 4;
    private long lineNumber_;
    /**
     * <pre>
     * Line number of the frame.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    public long getLineNumber() {
      return lineNumber_;
    }

    public static final int COLUMN_NUMBER_FIELD_NUMBER = 5;
    private long columnNumber_;
    /**
     * <pre>
     * Column number is important in JavaScript(anonymous functions),
     * Might not be available in some languages.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    public long getColumnNumber() {
      return columnNumber_;
    }

    public static final int LOAD_MODULE_FIELD_NUMBER = 6;
    private com.google.tracing.v1.Module loadModule_;
    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    public boolean hasLoadModule() {
      return loadModule_ != null;
    }
    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    public com.google.tracing.v1.Module getLoadModule() {
      return loadModule_ == null ? com.google.tracing.v1.Module.getDefaultInstance() : loadModule_;
    }
    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    public com.google.tracing.v1.ModuleOrBuilder getLoadModuleOrBuilder() {
      return getLoadModule();
    }

    public static final int SOURCE_VERSION_FIELD_NUMBER = 7;
    private volatile java.lang.Object sourceVersion_;
    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    public java.lang.String getSourceVersion() {
      java.lang.Object ref = sourceVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sourceVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    public com.google.protobuf.ByteString
        getSourceVersionBytes() {
      java.lang.Object ref = sourceVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sourceVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getFunctionNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, functionName_);
      }
      if (!getOrigFunctionNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, origFunctionName_);
      }
      if (!getFileNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, fileName_);
      }
      if (lineNumber_ != 0L) {
        output.writeInt64(4, lineNumber_);
      }
      if (columnNumber_ != 0L) {
        output.writeInt64(5, columnNumber_);
      }
      if (loadModule_ != null) {
        output.writeMessage(6, getLoadModule());
      }
      if (!getSourceVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, sourceVersion_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getFunctionNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, functionName_);
      }
      if (!getOrigFunctionNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, origFunctionName_);
      }
      if (!getFileNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, fileName_);
      }
      if (lineNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, lineNumber_);
      }
      if (columnNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, columnNumber_);
      }
      if (loadModule_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLoadModule());
      }
      if (!getSourceVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, sourceVersion_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.tracing.v1.StackTrace.StackFrame)) {
        return super.equals(obj);
      }
      com.google.tracing.v1.StackTrace.StackFrame other = (com.google.tracing.v1.StackTrace.StackFrame) obj;

      boolean result = true;
      result = result && getFunctionName()
          .equals(other.getFunctionName());
      result = result && getOrigFunctionName()
          .equals(other.getOrigFunctionName());
      result = result && getFileName()
          .equals(other.getFileName());
      result = result && (getLineNumber()
          == other.getLineNumber());
      result = result && (getColumnNumber()
          == other.getColumnNumber());
      result = result && (hasLoadModule() == other.hasLoadModule());
      if (hasLoadModule()) {
        result = result && getLoadModule()
            .equals(other.getLoadModule());
      }
      result = result && getSourceVersion()
          .equals(other.getSourceVersion());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FUNCTION_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getFunctionName().hashCode();
      hash = (37 * hash) + ORIG_FUNCTION_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getOrigFunctionName().hashCode();
      hash = (37 * hash) + FILE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getFileName().hashCode();
      hash = (37 * hash) + LINE_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLineNumber());
      hash = (37 * hash) + COLUMN_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getColumnNumber());
      if (hasLoadModule()) {
        hash = (37 * hash) + LOAD_MODULE_FIELD_NUMBER;
        hash = (53 * hash) + getLoadModule().hashCode();
      }
      hash = (37 * hash) + SOURCE_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getSourceVersion().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.tracing.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.tracing.v1.StackTrace.StackFrame prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Presents a single stack frame in a stack trace.
     * </pre>
     *
     * Protobuf type {@code google.tracing.v1.StackTrace.StackFrame}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.tracing.v1.StackTrace.StackFrame)
        com.google.tracing.v1.StackTrace.StackFrameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_StackFrame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_StackFrame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.tracing.v1.StackTrace.StackFrame.class, com.google.tracing.v1.StackTrace.StackFrame.Builder.class);
      }

      // Construct using com.google.tracing.v1.StackTrace.StackFrame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        functionName_ = "";

        origFunctionName_ = "";

        fileName_ = "";

        lineNumber_ = 0L;

        columnNumber_ = 0L;

        if (loadModuleBuilder_ == null) {
          loadModule_ = null;
        } else {
          loadModule_ = null;
          loadModuleBuilder_ = null;
        }
        sourceVersion_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_StackFrame_descriptor;
      }

      public com.google.tracing.v1.StackTrace.StackFrame getDefaultInstanceForType() {
        return com.google.tracing.v1.StackTrace.StackFrame.getDefaultInstance();
      }

      public com.google.tracing.v1.StackTrace.StackFrame build() {
        com.google.tracing.v1.StackTrace.StackFrame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.tracing.v1.StackTrace.StackFrame buildPartial() {
        com.google.tracing.v1.StackTrace.StackFrame result = new com.google.tracing.v1.StackTrace.StackFrame(this);
        result.functionName_ = functionName_;
        result.origFunctionName_ = origFunctionName_;
        result.fileName_ = fileName_;
        result.lineNumber_ = lineNumber_;
        result.columnNumber_ = columnNumber_;
        if (loadModuleBuilder_ == null) {
          result.loadModule_ = loadModule_;
        } else {
          result.loadModule_ = loadModuleBuilder_.build();
        }
        result.sourceVersion_ = sourceVersion_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.tracing.v1.StackTrace.StackFrame) {
          return mergeFrom((com.google.tracing.v1.StackTrace.StackFrame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.tracing.v1.StackTrace.StackFrame other) {
        if (other == com.google.tracing.v1.StackTrace.StackFrame.getDefaultInstance()) return this;
        if (!other.getFunctionName().isEmpty()) {
          functionName_ = other.functionName_;
          onChanged();
        }
        if (!other.getOrigFunctionName().isEmpty()) {
          origFunctionName_ = other.origFunctionName_;
          onChanged();
        }
        if (!other.getFileName().isEmpty()) {
          fileName_ = other.fileName_;
          onChanged();
        }
        if (other.getLineNumber() != 0L) {
          setLineNumber(other.getLineNumber());
        }
        if (other.getColumnNumber() != 0L) {
          setColumnNumber(other.getColumnNumber());
        }
        if (other.hasLoadModule()) {
          mergeLoadModule(other.getLoadModule());
        }
        if (!other.getSourceVersion().isEmpty()) {
          sourceVersion_ = other.sourceVersion_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.tracing.v1.StackTrace.StackFrame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.tracing.v1.StackTrace.StackFrame) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object functionName_ = "";
      /**
       * <pre>
       * Fully qualified names which uniquely identify function/method/etc.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       */
      public java.lang.String getFunctionName() {
        java.lang.Object ref = functionName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          functionName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Fully qualified names which uniquely identify function/method/etc.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFunctionNameBytes() {
        java.lang.Object ref = functionName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          functionName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Fully qualified names which uniquely identify function/method/etc.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       */
      public Builder setFunctionName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        functionName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully qualified names which uniquely identify function/method/etc.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       */
      public Builder clearFunctionName() {
        
        functionName_ = getDefaultInstance().getFunctionName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully qualified names which uniquely identify function/method/etc.
       * </pre>
       *
       * <code>string function_name = 1;</code>
       */
      public Builder setFunctionNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        functionName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object origFunctionName_ = "";
      /**
       * <pre>
       * Used when function name is ‘mangled’. Not guaranteed to be fully
       * qualified but usually it is.
       * </pre>
       *
       * <code>string orig_function_name = 2;</code>
       */
      public java.lang.String getOrigFunctionName() {
        java.lang.Object ref = origFunctionName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          origFunctionName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Used when function name is ‘mangled’. Not guaranteed to be fully
       * qualified but usually it is.
       * </pre>
       *
       * <code>string orig_function_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getOrigFunctionNameBytes() {
        java.lang.Object ref = origFunctionName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          origFunctionName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Used when function name is ‘mangled’. Not guaranteed to be fully
       * qualified but usually it is.
       * </pre>
       *
       * <code>string orig_function_name = 2;</code>
       */
      public Builder setOrigFunctionName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        origFunctionName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used when function name is ‘mangled’. Not guaranteed to be fully
       * qualified but usually it is.
       * </pre>
       *
       * <code>string orig_function_name = 2;</code>
       */
      public Builder clearOrigFunctionName() {
        
        origFunctionName_ = getDefaultInstance().getOrigFunctionName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used when function name is ‘mangled’. Not guaranteed to be fully
       * qualified but usually it is.
       * </pre>
       *
       * <code>string orig_function_name = 2;</code>
       */
      public Builder setOrigFunctionNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        origFunctionName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object fileName_ = "";
      /**
       * <pre>
       * File name of the frame.
       * </pre>
       *
       * <code>string file_name = 3;</code>
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          fileName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * File name of the frame.
       * </pre>
       *
       * <code>string file_name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * File name of the frame.
       * </pre>
       *
       * <code>string file_name = 3;</code>
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        fileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * File name of the frame.
       * </pre>
       *
       * <code>string file_name = 3;</code>
       */
      public Builder clearFileName() {
        
        fileName_ = getDefaultInstance().getFileName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * File name of the frame.
       * </pre>
       *
       * <code>string file_name = 3;</code>
       */
      public Builder setFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        fileName_ = value;
        onChanged();
        return this;
      }

      private long lineNumber_ ;
      /**
       * <pre>
       * Line number of the frame.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       */
      public long getLineNumber() {
        return lineNumber_;
      }
      /**
       * <pre>
       * Line number of the frame.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       */
      public Builder setLineNumber(long value) {
        
        lineNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line number of the frame.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       */
      public Builder clearLineNumber() {
        
        lineNumber_ = 0L;
        onChanged();
        return this;
      }

      private long columnNumber_ ;
      /**
       * <pre>
       * Column number is important in JavaScript(anonymous functions),
       * Might not be available in some languages.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       */
      public long getColumnNumber() {
        return columnNumber_;
      }
      /**
       * <pre>
       * Column number is important in JavaScript(anonymous functions),
       * Might not be available in some languages.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       */
      public Builder setColumnNumber(long value) {
        
        columnNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Column number is important in JavaScript(anonymous functions),
       * Might not be available in some languages.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       */
      public Builder clearColumnNumber() {
        
        columnNumber_ = 0L;
        onChanged();
        return this;
      }

      private com.google.tracing.v1.Module loadModule_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.tracing.v1.Module, com.google.tracing.v1.Module.Builder, com.google.tracing.v1.ModuleOrBuilder> loadModuleBuilder_;
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public boolean hasLoadModule() {
        return loadModuleBuilder_ != null || loadModule_ != null;
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public com.google.tracing.v1.Module getLoadModule() {
        if (loadModuleBuilder_ == null) {
          return loadModule_ == null ? com.google.tracing.v1.Module.getDefaultInstance() : loadModule_;
        } else {
          return loadModuleBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public Builder setLoadModule(com.google.tracing.v1.Module value) {
        if (loadModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loadModule_ = value;
          onChanged();
        } else {
          loadModuleBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public Builder setLoadModule(
          com.google.tracing.v1.Module.Builder builderForValue) {
        if (loadModuleBuilder_ == null) {
          loadModule_ = builderForValue.build();
          onChanged();
        } else {
          loadModuleBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public Builder mergeLoadModule(com.google.tracing.v1.Module value) {
        if (loadModuleBuilder_ == null) {
          if (loadModule_ != null) {
            loadModule_ =
              com.google.tracing.v1.Module.newBuilder(loadModule_).mergeFrom(value).buildPartial();
          } else {
            loadModule_ = value;
          }
          onChanged();
        } else {
          loadModuleBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public Builder clearLoadModule() {
        if (loadModuleBuilder_ == null) {
          loadModule_ = null;
          onChanged();
        } else {
          loadModule_ = null;
          loadModuleBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public com.google.tracing.v1.Module.Builder getLoadModuleBuilder() {
        
        onChanged();
        return getLoadModuleFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      public com.google.tracing.v1.ModuleOrBuilder getLoadModuleOrBuilder() {
        if (loadModuleBuilder_ != null) {
          return loadModuleBuilder_.getMessageOrBuilder();
        } else {
          return loadModule_ == null ?
              com.google.tracing.v1.Module.getDefaultInstance() : loadModule_;
        }
      }
      /**
       * <pre>
       * Binary module the code is loaded from.
       * </pre>
       *
       * <code>.google.tracing.v1.Module load_module = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.tracing.v1.Module, com.google.tracing.v1.Module.Builder, com.google.tracing.v1.ModuleOrBuilder> 
          getLoadModuleFieldBuilder() {
        if (loadModuleBuilder_ == null) {
          loadModuleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.tracing.v1.Module, com.google.tracing.v1.Module.Builder, com.google.tracing.v1.ModuleOrBuilder>(
                  getLoadModule(),
                  getParentForChildren(),
                  isClean());
          loadModule_ = null;
        }
        return loadModuleBuilder_;
      }

      private java.lang.Object sourceVersion_ = "";
      /**
       * <pre>
       * source_version is deployment specific. It might be
       * better to be stored in deployment metadata.
       * However, in distributed tracing, it’s hard to keep track of
       * source/binary versions at one place for all spans.
       * </pre>
       *
       * <code>string source_version = 7;</code>
       */
      public java.lang.String getSourceVersion() {
        java.lang.Object ref = sourceVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * source_version is deployment specific. It might be
       * better to be stored in deployment metadata.
       * However, in distributed tracing, it’s hard to keep track of
       * source/binary versions at one place for all spans.
       * </pre>
       *
       * <code>string source_version = 7;</code>
       */
      public com.google.protobuf.ByteString
          getSourceVersionBytes() {
        java.lang.Object ref = sourceVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * source_version is deployment specific. It might be
       * better to be stored in deployment metadata.
       * However, in distributed tracing, it’s hard to keep track of
       * source/binary versions at one place for all spans.
       * </pre>
       *
       * <code>string source_version = 7;</code>
       */
      public Builder setSourceVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sourceVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * source_version is deployment specific. It might be
       * better to be stored in deployment metadata.
       * However, in distributed tracing, it’s hard to keep track of
       * source/binary versions at one place for all spans.
       * </pre>
       *
       * <code>string source_version = 7;</code>
       */
      public Builder clearSourceVersion() {
        
        sourceVersion_ = getDefaultInstance().getSourceVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * source_version is deployment specific. It might be
       * better to be stored in deployment metadata.
       * However, in distributed tracing, it’s hard to keep track of
       * source/binary versions at one place for all spans.
       * </pre>
       *
       * <code>string source_version = 7;</code>
       */
      public Builder setSourceVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sourceVersion_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.tracing.v1.StackTrace.StackFrame)
    }

    // @@protoc_insertion_point(class_scope:google.tracing.v1.StackTrace.StackFrame)
    private static final com.google.tracing.v1.StackTrace.StackFrame DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.tracing.v1.StackTrace.StackFrame();
    }

    public static com.google.tracing.v1.StackTrace.StackFrame getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StackFrame>
        PARSER = new com.google.protobuf.AbstractParser<StackFrame>() {
      public StackFrame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StackFrame(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StackFrame> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StackFrame> getParserForType() {
      return PARSER;
    }

    public com.google.tracing.v1.StackTrace.StackFrame getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int STACK_FRAME_FIELD_NUMBER = 1;
  private java.util.List<com.google.tracing.v1.StackTrace.StackFrame> stackFrame_;
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  public java.util.List<com.google.tracing.v1.StackTrace.StackFrame> getStackFrameList() {
    return stackFrame_;
  }
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  public java.util.List<? extends com.google.tracing.v1.StackTrace.StackFrameOrBuilder> 
      getStackFrameOrBuilderList() {
    return stackFrame_;
  }
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  public int getStackFrameCount() {
    return stackFrame_.size();
  }
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  public com.google.tracing.v1.StackTrace.StackFrame getStackFrame(int index) {
    return stackFrame_.get(index);
  }
  /**
   * <pre>
   * Stack frames of this stack trace.
   * </pre>
   *
   * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
   */
  public com.google.tracing.v1.StackTrace.StackFrameOrBuilder getStackFrameOrBuilder(
      int index) {
    return stackFrame_.get(index);
  }

  public static final int STACK_TRACE_HASH_ID_FIELD_NUMBER = 2;
  private long stackTraceHashId_;
  /**
   * <pre>
   * User can choose to use his own hash function to hash large labels to save
   * network bandwidth and storage.
   * Typical usage is to pass both initially to inform the storage of the
   * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
   * User shall verify the hash value is successfully stored.
   * </pre>
   *
   * <code>uint64 stack_trace_hash_id = 2;</code>
   */
  public long getStackTraceHashId() {
    return stackTraceHashId_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < stackFrame_.size(); i++) {
      output.writeMessage(1, stackFrame_.get(i));
    }
    if (stackTraceHashId_ != 0L) {
      output.writeUInt64(2, stackTraceHashId_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < stackFrame_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, stackFrame_.get(i));
    }
    if (stackTraceHashId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(2, stackTraceHashId_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.tracing.v1.StackTrace)) {
      return super.equals(obj);
    }
    com.google.tracing.v1.StackTrace other = (com.google.tracing.v1.StackTrace) obj;

    boolean result = true;
    result = result && getStackFrameList()
        .equals(other.getStackFrameList());
    result = result && (getStackTraceHashId()
        == other.getStackTraceHashId());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getStackFrameCount() > 0) {
      hash = (37 * hash) + STACK_FRAME_FIELD_NUMBER;
      hash = (53 * hash) + getStackFrameList().hashCode();
    }
    hash = (37 * hash) + STACK_TRACE_HASH_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStackTraceHashId());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.tracing.v1.StackTrace parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.tracing.v1.StackTrace parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.tracing.v1.StackTrace parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.tracing.v1.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.tracing.v1.StackTrace prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.tracing.v1.StackTrace}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.tracing.v1.StackTrace)
      com.google.tracing.v1.StackTraceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.tracing.v1.StackTrace.class, com.google.tracing.v1.StackTrace.Builder.class);
    }

    // Construct using com.google.tracing.v1.StackTrace.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getStackFrameFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (stackFrameBuilder_ == null) {
        stackFrame_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        stackFrameBuilder_.clear();
      }
      stackTraceHashId_ = 0L;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.tracing.v1.TraceProto.internal_static_google_tracing_v1_StackTrace_descriptor;
    }

    public com.google.tracing.v1.StackTrace getDefaultInstanceForType() {
      return com.google.tracing.v1.StackTrace.getDefaultInstance();
    }

    public com.google.tracing.v1.StackTrace build() {
      com.google.tracing.v1.StackTrace result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.tracing.v1.StackTrace buildPartial() {
      com.google.tracing.v1.StackTrace result = new com.google.tracing.v1.StackTrace(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (stackFrameBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          stackFrame_ = java.util.Collections.unmodifiableList(stackFrame_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.stackFrame_ = stackFrame_;
      } else {
        result.stackFrame_ = stackFrameBuilder_.build();
      }
      result.stackTraceHashId_ = stackTraceHashId_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.tracing.v1.StackTrace) {
        return mergeFrom((com.google.tracing.v1.StackTrace)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.tracing.v1.StackTrace other) {
      if (other == com.google.tracing.v1.StackTrace.getDefaultInstance()) return this;
      if (stackFrameBuilder_ == null) {
        if (!other.stackFrame_.isEmpty()) {
          if (stackFrame_.isEmpty()) {
            stackFrame_ = other.stackFrame_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureStackFrameIsMutable();
            stackFrame_.addAll(other.stackFrame_);
          }
          onChanged();
        }
      } else {
        if (!other.stackFrame_.isEmpty()) {
          if (stackFrameBuilder_.isEmpty()) {
            stackFrameBuilder_.dispose();
            stackFrameBuilder_ = null;
            stackFrame_ = other.stackFrame_;
            bitField0_ = (bitField0_ & ~0x00000001);
            stackFrameBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStackFrameFieldBuilder() : null;
          } else {
            stackFrameBuilder_.addAllMessages(other.stackFrame_);
          }
        }
      }
      if (other.getStackTraceHashId() != 0L) {
        setStackTraceHashId(other.getStackTraceHashId());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.tracing.v1.StackTrace parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.tracing.v1.StackTrace) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.tracing.v1.StackTrace.StackFrame> stackFrame_ =
      java.util.Collections.emptyList();
    private void ensureStackFrameIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        stackFrame_ = new java.util.ArrayList<com.google.tracing.v1.StackTrace.StackFrame>(stackFrame_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.tracing.v1.StackTrace.StackFrame, com.google.tracing.v1.StackTrace.StackFrame.Builder, com.google.tracing.v1.StackTrace.StackFrameOrBuilder> stackFrameBuilder_;

    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public java.util.List<com.google.tracing.v1.StackTrace.StackFrame> getStackFrameList() {
      if (stackFrameBuilder_ == null) {
        return java.util.Collections.unmodifiableList(stackFrame_);
      } else {
        return stackFrameBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public int getStackFrameCount() {
      if (stackFrameBuilder_ == null) {
        return stackFrame_.size();
      } else {
        return stackFrameBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public com.google.tracing.v1.StackTrace.StackFrame getStackFrame(int index) {
      if (stackFrameBuilder_ == null) {
        return stackFrame_.get(index);
      } else {
        return stackFrameBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder setStackFrame(
        int index, com.google.tracing.v1.StackTrace.StackFrame value) {
      if (stackFrameBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStackFrameIsMutable();
        stackFrame_.set(index, value);
        onChanged();
      } else {
        stackFrameBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder setStackFrame(
        int index, com.google.tracing.v1.StackTrace.StackFrame.Builder builderForValue) {
      if (stackFrameBuilder_ == null) {
        ensureStackFrameIsMutable();
        stackFrame_.set(index, builderForValue.build());
        onChanged();
      } else {
        stackFrameBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder addStackFrame(com.google.tracing.v1.StackTrace.StackFrame value) {
      if (stackFrameBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStackFrameIsMutable();
        stackFrame_.add(value);
        onChanged();
      } else {
        stackFrameBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder addStackFrame(
        int index, com.google.tracing.v1.StackTrace.StackFrame value) {
      if (stackFrameBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStackFrameIsMutable();
        stackFrame_.add(index, value);
        onChanged();
      } else {
        stackFrameBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder addStackFrame(
        com.google.tracing.v1.StackTrace.StackFrame.Builder builderForValue) {
      if (stackFrameBuilder_ == null) {
        ensureStackFrameIsMutable();
        stackFrame_.add(builderForValue.build());
        onChanged();
      } else {
        stackFrameBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder addStackFrame(
        int index, com.google.tracing.v1.StackTrace.StackFrame.Builder builderForValue) {
      if (stackFrameBuilder_ == null) {
        ensureStackFrameIsMutable();
        stackFrame_.add(index, builderForValue.build());
        onChanged();
      } else {
        stackFrameBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder addAllStackFrame(
        java.lang.Iterable<? extends com.google.tracing.v1.StackTrace.StackFrame> values) {
      if (stackFrameBuilder_ == null) {
        ensureStackFrameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stackFrame_);
        onChanged();
      } else {
        stackFrameBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder clearStackFrame() {
      if (stackFrameBuilder_ == null) {
        stackFrame_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        stackFrameBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public Builder removeStackFrame(int index) {
      if (stackFrameBuilder_ == null) {
        ensureStackFrameIsMutable();
        stackFrame_.remove(index);
        onChanged();
      } else {
        stackFrameBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public com.google.tracing.v1.StackTrace.StackFrame.Builder getStackFrameBuilder(
        int index) {
      return getStackFrameFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public com.google.tracing.v1.StackTrace.StackFrameOrBuilder getStackFrameOrBuilder(
        int index) {
      if (stackFrameBuilder_ == null) {
        return stackFrame_.get(index);  } else {
        return stackFrameBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public java.util.List<? extends com.google.tracing.v1.StackTrace.StackFrameOrBuilder> 
         getStackFrameOrBuilderList() {
      if (stackFrameBuilder_ != null) {
        return stackFrameBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(stackFrame_);
      }
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public com.google.tracing.v1.StackTrace.StackFrame.Builder addStackFrameBuilder() {
      return getStackFrameFieldBuilder().addBuilder(
          com.google.tracing.v1.StackTrace.StackFrame.getDefaultInstance());
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public com.google.tracing.v1.StackTrace.StackFrame.Builder addStackFrameBuilder(
        int index) {
      return getStackFrameFieldBuilder().addBuilder(
          index, com.google.tracing.v1.StackTrace.StackFrame.getDefaultInstance());
    }
    /**
     * <pre>
     * Stack frames of this stack trace.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    public java.util.List<com.google.tracing.v1.StackTrace.StackFrame.Builder> 
         getStackFrameBuilderList() {
      return getStackFrameFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.tracing.v1.StackTrace.StackFrame, com.google.tracing.v1.StackTrace.StackFrame.Builder, com.google.tracing.v1.StackTrace.StackFrameOrBuilder> 
        getStackFrameFieldBuilder() {
      if (stackFrameBuilder_ == null) {
        stackFrameBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.tracing.v1.StackTrace.StackFrame, com.google.tracing.v1.StackTrace.StackFrame.Builder, com.google.tracing.v1.StackTrace.StackFrameOrBuilder>(
                stackFrame_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        stackFrame_ = null;
      }
      return stackFrameBuilder_;
    }

    private long stackTraceHashId_ ;
    /**
     * <pre>
     * User can choose to use his own hash function to hash large labels to save
     * network bandwidth and storage.
     * Typical usage is to pass both initially to inform the storage of the
     * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
     * User shall verify the hash value is successfully stored.
     * </pre>
     *
     * <code>uint64 stack_trace_hash_id = 2;</code>
     */
    public long getStackTraceHashId() {
      return stackTraceHashId_;
    }
    /**
     * <pre>
     * User can choose to use his own hash function to hash large labels to save
     * network bandwidth and storage.
     * Typical usage is to pass both initially to inform the storage of the
     * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
     * User shall verify the hash value is successfully stored.
     * </pre>
     *
     * <code>uint64 stack_trace_hash_id = 2;</code>
     */
    public Builder setStackTraceHashId(long value) {
      
      stackTraceHashId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * User can choose to use his own hash function to hash large labels to save
     * network bandwidth and storage.
     * Typical usage is to pass both initially to inform the storage of the
     * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
     * User shall verify the hash value is successfully stored.
     * </pre>
     *
     * <code>uint64 stack_trace_hash_id = 2;</code>
     */
    public Builder clearStackTraceHashId() {
      
      stackTraceHashId_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.tracing.v1.StackTrace)
  }

  // @@protoc_insertion_point(class_scope:google.tracing.v1.StackTrace)
  private static final com.google.tracing.v1.StackTrace DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.tracing.v1.StackTrace();
  }

  public static com.google.tracing.v1.StackTrace getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StackTrace>
      PARSER = new com.google.protobuf.AbstractParser<StackTrace>() {
    public StackTrace parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new StackTrace(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StackTrace> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StackTrace> getParserForType() {
    return PARSER;
  }

  public com.google.tracing.v1.StackTrace getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

