// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/ml/v1beta1/job_service.proto

package com.google.cloud.ml.api.v1beta1;

public interface HyperparameterSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.ml.v1beta1.HyperparameterSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The type of goal to use for tuning. Available types are
   * `MAXIMIZE` and `MINIMIZE`.
   * Defaults to `MAXIMIZE`.
   * </pre>
   *
   * <code>.google.cloud.ml.v1beta1.HyperparameterSpec.GoalType goal = 1;</code>
   */
  int getGoalValue();
  /**
   * <pre>
   * Required. The type of goal to use for tuning. Available types are
   * `MAXIMIZE` and `MINIMIZE`.
   * Defaults to `MAXIMIZE`.
   * </pre>
   *
   * <code>.google.cloud.ml.v1beta1.HyperparameterSpec.GoalType goal = 1;</code>
   */
  com.google.cloud.ml.api.v1beta1.HyperparameterSpec.GoalType getGoal();

  /**
   * <pre>
   * Required. The set of parameters to tune.
   * </pre>
   *
   * <code>repeated .google.cloud.ml.v1beta1.ParameterSpec params = 2;</code>
   */
  java.util.List<com.google.cloud.ml.api.v1beta1.ParameterSpec> 
      getParamsList();
  /**
   * <pre>
   * Required. The set of parameters to tune.
   * </pre>
   *
   * <code>repeated .google.cloud.ml.v1beta1.ParameterSpec params = 2;</code>
   */
  com.google.cloud.ml.api.v1beta1.ParameterSpec getParams(int index);
  /**
   * <pre>
   * Required. The set of parameters to tune.
   * </pre>
   *
   * <code>repeated .google.cloud.ml.v1beta1.ParameterSpec params = 2;</code>
   */
  int getParamsCount();
  /**
   * <pre>
   * Required. The set of parameters to tune.
   * </pre>
   *
   * <code>repeated .google.cloud.ml.v1beta1.ParameterSpec params = 2;</code>
   */
  java.util.List<? extends com.google.cloud.ml.api.v1beta1.ParameterSpecOrBuilder> 
      getParamsOrBuilderList();
  /**
   * <pre>
   * Required. The set of parameters to tune.
   * </pre>
   *
   * <code>repeated .google.cloud.ml.v1beta1.ParameterSpec params = 2;</code>
   */
  com.google.cloud.ml.api.v1beta1.ParameterSpecOrBuilder getParamsOrBuilder(
      int index);

  /**
   * <pre>
   * Optional. How many training trials should be attempted to optimize
   * the specified hyperparameters.
   * Defaults to one.
   * </pre>
   *
   * <code>int32 max_trials = 3;</code>
   */
  int getMaxTrials();

  /**
   * <pre>
   * Optional. The number of training trials to run concurrently.
   * You can reduce the time it takes to perform hyperparameter tuning by adding
   * trials in parallel. However, each trail only benefits from the information
   * gained in completed trials. That means that a trial does not get access to
   * the results of trials running at the same time, which could reduce the
   * quality of the overall optimization.
   * Each trial will use the same scale tier and machine types.
   * Defaults to one.
   * </pre>
   *
   * <code>int32 max_parallel_trials = 4;</code>
   */
  int getMaxParallelTrials();

  /**
   * <pre>
   * Optional. The Tensorflow summary tag name to use for optimizing trials. For
   * current versions of Tensorflow, this tag name should exactly match what is
   * shown in Tensorboard, including all scopes.  For versions of Tensorflow
   * prior to 0.12, this should be only the tag passed to tf.Summary.
   * By default, "training/hptuning/metric" will be used.
   * </pre>
   *
   * <code>string hyperparameter_metric_tag = 5;</code>
   */
  java.lang.String getHyperparameterMetricTag();
  /**
   * <pre>
   * Optional. The Tensorflow summary tag name to use for optimizing trials. For
   * current versions of Tensorflow, this tag name should exactly match what is
   * shown in Tensorboard, including all scopes.  For versions of Tensorflow
   * prior to 0.12, this should be only the tag passed to tf.Summary.
   * By default, "training/hptuning/metric" will be used.
   * </pre>
   *
   * <code>string hyperparameter_metric_tag = 5;</code>
   */
  com.google.protobuf.ByteString
      getHyperparameterMetricTagBytes();
}
