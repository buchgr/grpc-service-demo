// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/ml/v1/job_service.proto

package com.google.cloud.ml.api.v1;

public interface ParameterSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.ml.v1.ParameterSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The parameter name must be unique amongst all ParameterConfigs in
   * a HyperparameterSpec message. E.g., "learning_rate".
   * </pre>
   *
   * <code>string parameter_name = 1;</code>
   */
  java.lang.String getParameterName();
  /**
   * <pre>
   * Required. The parameter name must be unique amongst all ParameterConfigs in
   * a HyperparameterSpec message. E.g., "learning_rate".
   * </pre>
   *
   * <code>string parameter_name = 1;</code>
   */
  com.google.protobuf.ByteString
      getParameterNameBytes();

  /**
   * <pre>
   * Required. The type of the parameter.
   * </pre>
   *
   * <code>.google.cloud.ml.v1.ParameterSpec.ParameterType type = 4;</code>
   */
  int getTypeValue();
  /**
   * <pre>
   * Required. The type of the parameter.
   * </pre>
   *
   * <code>.google.cloud.ml.v1.ParameterSpec.ParameterType type = 4;</code>
   */
  com.google.cloud.ml.api.v1.ParameterSpec.ParameterType getType();

  /**
   * <pre>
   * Required if type is `DOUBLE` or `INTEGER`. This field
   * should be unset if type is `CATEGORICAL`. This value should be integers if
   * type is INTEGER.
   * </pre>
   *
   * <code>double min_value = 2;</code>
   */
  double getMinValue();

  /**
   * <pre>
   * Required if typeis `DOUBLE` or `INTEGER`. This field
   * should be unset if type is `CATEGORICAL`. This value should be integers if
   * type is `INTEGER`.
   * </pre>
   *
   * <code>double max_value = 3;</code>
   */
  double getMaxValue();

  /**
   * <pre>
   * Required if type is `CATEGORICAL`. The list of possible categories.
   * </pre>
   *
   * <code>repeated string categorical_values = 5;</code>
   */
  java.util.List<java.lang.String>
      getCategoricalValuesList();
  /**
   * <pre>
   * Required if type is `CATEGORICAL`. The list of possible categories.
   * </pre>
   *
   * <code>repeated string categorical_values = 5;</code>
   */
  int getCategoricalValuesCount();
  /**
   * <pre>
   * Required if type is `CATEGORICAL`. The list of possible categories.
   * </pre>
   *
   * <code>repeated string categorical_values = 5;</code>
   */
  java.lang.String getCategoricalValues(int index);
  /**
   * <pre>
   * Required if type is `CATEGORICAL`. The list of possible categories.
   * </pre>
   *
   * <code>repeated string categorical_values = 5;</code>
   */
  com.google.protobuf.ByteString
      getCategoricalValuesBytes(int index);

  /**
   * <pre>
   * Required if type is `DISCRETE`.
   * A list of feasible points.
   * The list should be in strictly increasing order. For instance, this
   * parameter might have possible settings of 1.5, 2.5, and 4.0. This list
   * should not contain more than 1,000 values.
   * </pre>
   *
   * <code>repeated double discrete_values = 6;</code>
   */
  java.util.List<java.lang.Double> getDiscreteValuesList();
  /**
   * <pre>
   * Required if type is `DISCRETE`.
   * A list of feasible points.
   * The list should be in strictly increasing order. For instance, this
   * parameter might have possible settings of 1.5, 2.5, and 4.0. This list
   * should not contain more than 1,000 values.
   * </pre>
   *
   * <code>repeated double discrete_values = 6;</code>
   */
  int getDiscreteValuesCount();
  /**
   * <pre>
   * Required if type is `DISCRETE`.
   * A list of feasible points.
   * The list should be in strictly increasing order. For instance, this
   * parameter might have possible settings of 1.5, 2.5, and 4.0. This list
   * should not contain more than 1,000 values.
   * </pre>
   *
   * <code>repeated double discrete_values = 6;</code>
   */
  double getDiscreteValues(int index);

  /**
   * <pre>
   * Optional. How the parameter should be scaled to the hypercube.
   * Leave unset for categorical parameters.
   * Some kind of scaling is strongly recommended for real or integral
   * parameters (e.g., `UNIT_LINEAR_SCALE`).
   * </pre>
   *
   * <code>.google.cloud.ml.v1.ParameterSpec.ScaleType scale_type = 7;</code>
   */
  int getScaleTypeValue();
  /**
   * <pre>
   * Optional. How the parameter should be scaled to the hypercube.
   * Leave unset for categorical parameters.
   * Some kind of scaling is strongly recommended for real or integral
   * parameters (e.g., `UNIT_LINEAR_SCALE`).
   * </pre>
   *
   * <code>.google.cloud.ml.v1.ParameterSpec.ScaleType scale_type = 7;</code>
   */
  com.google.cloud.ml.api.v1.ParameterSpec.ScaleType getScaleType();
}
