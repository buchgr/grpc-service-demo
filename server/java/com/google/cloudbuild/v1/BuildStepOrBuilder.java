// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudbuild/v1/cloudbuild.proto

package com.google.cloudbuild.v1;

public interface BuildStepOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.cloudbuild.v1.BuildStep)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the container image that will run this particular build step.
   * If the image is already available in the host's Docker daemon's cache, it
   * will be run directly. If not, the host will attempt to pull the image
   * first, using the builder service account's credentials if necessary.
   * The Docker daemon's cache will already have the latest versions of all of
   * the officially supported build steps
   * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
   * will also have cached many of the layers for some popular images, like
   * "ubuntu", "debian", but they will be refreshed at the time you attempt to
   * use them.
   * If you built an image in a previous build step, it will be stored in the
   * host's Docker daemon's cache and is available to use as the name for a
   * later build step.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the container image that will run this particular build step.
   * If the image is already available in the host's Docker daemon's cache, it
   * will be run directly. If not, the host will attempt to pull the image
   * first, using the builder service account's credentials if necessary.
   * The Docker daemon's cache will already have the latest versions of all of
   * the officially supported build steps
   * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
   * will also have cached many of the layers for some popular images, like
   * "ubuntu", "debian", but they will be refreshed at the time you attempt to
   * use them.
   * If you built an image in a previous build step, it will be stored in the
   * host's Docker daemon's cache and is available to use as the name for a
   * later build step.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  java.util.List<java.lang.String>
      getEnvList();
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  int getEnvCount();
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  java.lang.String getEnv(int index);
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  com.google.protobuf.ByteString
      getEnvBytes(int index);

  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  java.util.List<java.lang.String>
      getArgsList();
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  int getArgsCount();
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  java.lang.String getArgs(int index);
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  com.google.protobuf.ByteString
      getArgsBytes(int index);

  /**
   * <pre>
   * Working directory (relative to project source root) to use when running
   * this operation's container.
   * </pre>
   *
   * <code>string dir = 4;</code>
   */
  java.lang.String getDir();
  /**
   * <pre>
   * Working directory (relative to project source root) to use when running
   * this operation's container.
   * </pre>
   *
   * <code>string dir = 4;</code>
   */
  com.google.protobuf.ByteString
      getDirBytes();

  /**
   * <pre>
   * Optional unique identifier for this build step, used in wait_for to
   * reference this build step as a dependency.
   * </pre>
   *
   * <code>string id = 5;</code>
   */
  java.lang.String getId();
  /**
   * <pre>
   * Optional unique identifier for this build step, used in wait_for to
   * reference this build step as a dependency.
   * </pre>
   *
   * <code>string id = 5;</code>
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  java.util.List<java.lang.String>
      getWaitForList();
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  int getWaitForCount();
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  java.lang.String getWaitFor(int index);
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  com.google.protobuf.ByteString
      getWaitForBytes(int index);

  /**
   * <pre>
   * Optional entrypoint to be used instead of the build step image's default
   * If unset, the image's default will be used.
   * </pre>
   *
   * <code>string entrypoint = 7;</code>
   */
  java.lang.String getEntrypoint();
  /**
   * <pre>
   * Optional entrypoint to be used instead of the build step image's default
   * If unset, the image's default will be used.
   * </pre>
   *
   * <code>string entrypoint = 7;</code>
   */
  com.google.protobuf.ByteString
      getEntrypointBytes();
}
