// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudbuild/v1/cloudbuild.proto

package com.google.cloudbuild.v1;

/**
 * <pre>
 * BuildStep describes a step to perform in the build pipeline.
 * </pre>
 *
 * Protobuf type {@code google.devtools.cloudbuild.v1.BuildStep}
 */
public  final class BuildStep extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.cloudbuild.v1.BuildStep)
    BuildStepOrBuilder {
  // Use BuildStep.newBuilder() to construct.
  private BuildStep(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BuildStep() {
    name_ = "";
    env_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    dir_ = "";
    id_ = "";
    waitFor_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    entrypoint_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private BuildStep(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              env_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            env_.add(s);
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              args_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            args_.add(s);
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            dir_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            id_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              waitFor_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000020;
            }
            waitFor_.add(s);
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();

            entrypoint_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        env_ = env_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        args_ = args_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        waitFor_ = waitFor_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloudbuild.v1.Cloudbuild.internal_static_google_devtools_cloudbuild_v1_BuildStep_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloudbuild.v1.Cloudbuild.internal_static_google_devtools_cloudbuild_v1_BuildStep_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloudbuild.v1.BuildStep.class, com.google.cloudbuild.v1.BuildStep.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The name of the container image that will run this particular build step.
   * If the image is already available in the host's Docker daemon's cache, it
   * will be run directly. If not, the host will attempt to pull the image
   * first, using the builder service account's credentials if necessary.
   * The Docker daemon's cache will already have the latest versions of all of
   * the officially supported build steps
   * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
   * will also have cached many of the layers for some popular images, like
   * "ubuntu", "debian", but they will be refreshed at the time you attempt to
   * use them.
   * If you built an image in a previous build step, it will be stored in the
   * host's Docker daemon's cache and is available to use as the name for a
   * later build step.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the container image that will run this particular build step.
   * If the image is already available in the host's Docker daemon's cache, it
   * will be run directly. If not, the host will attempt to pull the image
   * first, using the builder service account's credentials if necessary.
   * The Docker daemon's cache will already have the latest versions of all of
   * the officially supported build steps
   * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
   * will also have cached many of the layers for some popular images, like
   * "ubuntu", "debian", but they will be refreshed at the time you attempt to
   * use them.
   * If you built an image in a previous build step, it will be stored in the
   * host's Docker daemon's cache and is available to use as the name for a
   * later build step.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ENV_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList env_;
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getEnvList() {
    return env_;
  }
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  public int getEnvCount() {
    return env_.size();
  }
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  public java.lang.String getEnv(int index) {
    return env_.get(index);
  }
  /**
   * <pre>
   * A list of environment variable definitions to be used when running a step.
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   * </pre>
   *
   * <code>repeated string env = 2;</code>
   */
  public com.google.protobuf.ByteString
      getEnvBytes(int index) {
    return env_.getByteString(index);
  }

  public static final int ARGS_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList args_;
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getArgsList() {
    return args_;
  }
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  public int getArgsCount() {
    return args_.size();
  }
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  public java.lang.String getArgs(int index) {
    return args_.get(index);
  }
  /**
   * <pre>
   * A list of arguments that will be presented to the step when it is started.
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   * </pre>
   *
   * <code>repeated string args = 3;</code>
   */
  public com.google.protobuf.ByteString
      getArgsBytes(int index) {
    return args_.getByteString(index);
  }

  public static final int DIR_FIELD_NUMBER = 4;
  private volatile java.lang.Object dir_;
  /**
   * <pre>
   * Working directory (relative to project source root) to use when running
   * this operation's container.
   * </pre>
   *
   * <code>string dir = 4;</code>
   */
  public java.lang.String getDir() {
    java.lang.Object ref = dir_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      dir_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Working directory (relative to project source root) to use when running
   * this operation's container.
   * </pre>
   *
   * <code>string dir = 4;</code>
   */
  public com.google.protobuf.ByteString
      getDirBytes() {
    java.lang.Object ref = dir_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      dir_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ID_FIELD_NUMBER = 5;
  private volatile java.lang.Object id_;
  /**
   * <pre>
   * Optional unique identifier for this build step, used in wait_for to
   * reference this build step as a dependency.
   * </pre>
   *
   * <code>string id = 5;</code>
   */
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Optional unique identifier for this build step, used in wait_for to
   * reference this build step as a dependency.
   * </pre>
   *
   * <code>string id = 5;</code>
   */
  public com.google.protobuf.ByteString
      getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int WAIT_FOR_FIELD_NUMBER = 6;
  private com.google.protobuf.LazyStringList waitFor_;
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getWaitForList() {
    return waitFor_;
  }
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  public int getWaitForCount() {
    return waitFor_.size();
  }
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  public java.lang.String getWaitFor(int index) {
    return waitFor_.get(index);
  }
  /**
   * <pre>
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   * </pre>
   *
   * <code>repeated string wait_for = 6;</code>
   */
  public com.google.protobuf.ByteString
      getWaitForBytes(int index) {
    return waitFor_.getByteString(index);
  }

  public static final int ENTRYPOINT_FIELD_NUMBER = 7;
  private volatile java.lang.Object entrypoint_;
  /**
   * <pre>
   * Optional entrypoint to be used instead of the build step image's default
   * If unset, the image's default will be used.
   * </pre>
   *
   * <code>string entrypoint = 7;</code>
   */
  public java.lang.String getEntrypoint() {
    java.lang.Object ref = entrypoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      entrypoint_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Optional entrypoint to be used instead of the build step image's default
   * If unset, the image's default will be used.
   * </pre>
   *
   * <code>string entrypoint = 7;</code>
   */
  public com.google.protobuf.ByteString
      getEntrypointBytes() {
    java.lang.Object ref = entrypoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      entrypoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    for (int i = 0; i < env_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, env_.getRaw(i));
    }
    for (int i = 0; i < args_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, args_.getRaw(i));
    }
    if (!getDirBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, dir_);
    }
    if (!getIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, id_);
    }
    for (int i = 0; i < waitFor_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, waitFor_.getRaw(i));
    }
    if (!getEntrypointBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, entrypoint_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < env_.size(); i++) {
        dataSize += computeStringSizeNoTag(env_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getEnvList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < args_.size(); i++) {
        dataSize += computeStringSizeNoTag(args_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getArgsList().size();
    }
    if (!getDirBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, dir_);
    }
    if (!getIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, id_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < waitFor_.size(); i++) {
        dataSize += computeStringSizeNoTag(waitFor_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getWaitForList().size();
    }
    if (!getEntrypointBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, entrypoint_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloudbuild.v1.BuildStep)) {
      return super.equals(obj);
    }
    com.google.cloudbuild.v1.BuildStep other = (com.google.cloudbuild.v1.BuildStep) obj;

    boolean result = true;
    result = result && getName()
        .equals(other.getName());
    result = result && getEnvList()
        .equals(other.getEnvList());
    result = result && getArgsList()
        .equals(other.getArgsList());
    result = result && getDir()
        .equals(other.getDir());
    result = result && getId()
        .equals(other.getId());
    result = result && getWaitForList()
        .equals(other.getWaitForList());
    result = result && getEntrypoint()
        .equals(other.getEntrypoint());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (getEnvCount() > 0) {
      hash = (37 * hash) + ENV_FIELD_NUMBER;
      hash = (53 * hash) + getEnvList().hashCode();
    }
    if (getArgsCount() > 0) {
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgsList().hashCode();
    }
    hash = (37 * hash) + DIR_FIELD_NUMBER;
    hash = (53 * hash) + getDir().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    if (getWaitForCount() > 0) {
      hash = (37 * hash) + WAIT_FOR_FIELD_NUMBER;
      hash = (53 * hash) + getWaitForList().hashCode();
    }
    hash = (37 * hash) + ENTRYPOINT_FIELD_NUMBER;
    hash = (53 * hash) + getEntrypoint().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloudbuild.v1.BuildStep parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloudbuild.v1.BuildStep parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloudbuild.v1.BuildStep parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloudbuild.v1.BuildStep parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloudbuild.v1.BuildStep prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * BuildStep describes a step to perform in the build pipeline.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudbuild.v1.BuildStep}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.cloudbuild.v1.BuildStep)
      com.google.cloudbuild.v1.BuildStepOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloudbuild.v1.Cloudbuild.internal_static_google_devtools_cloudbuild_v1_BuildStep_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloudbuild.v1.Cloudbuild.internal_static_google_devtools_cloudbuild_v1_BuildStep_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloudbuild.v1.BuildStep.class, com.google.cloudbuild.v1.BuildStep.Builder.class);
    }

    // Construct using com.google.cloudbuild.v1.BuildStep.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      env_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      dir_ = "";

      id_ = "";

      waitFor_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      entrypoint_ = "";

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloudbuild.v1.Cloudbuild.internal_static_google_devtools_cloudbuild_v1_BuildStep_descriptor;
    }

    public com.google.cloudbuild.v1.BuildStep getDefaultInstanceForType() {
      return com.google.cloudbuild.v1.BuildStep.getDefaultInstance();
    }

    public com.google.cloudbuild.v1.BuildStep build() {
      com.google.cloudbuild.v1.BuildStep result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.cloudbuild.v1.BuildStep buildPartial() {
      com.google.cloudbuild.v1.BuildStep result = new com.google.cloudbuild.v1.BuildStep(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        env_ = env_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.env_ = env_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        args_ = args_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.args_ = args_;
      result.dir_ = dir_;
      result.id_ = id_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        waitFor_ = waitFor_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.waitFor_ = waitFor_;
      result.entrypoint_ = entrypoint_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloudbuild.v1.BuildStep) {
        return mergeFrom((com.google.cloudbuild.v1.BuildStep)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloudbuild.v1.BuildStep other) {
      if (other == com.google.cloudbuild.v1.BuildStep.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.env_.isEmpty()) {
        if (env_.isEmpty()) {
          env_ = other.env_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureEnvIsMutable();
          env_.addAll(other.env_);
        }
        onChanged();
      }
      if (!other.args_.isEmpty()) {
        if (args_.isEmpty()) {
          args_ = other.args_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureArgsIsMutable();
          args_.addAll(other.args_);
        }
        onChanged();
      }
      if (!other.getDir().isEmpty()) {
        dir_ = other.dir_;
        onChanged();
      }
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        onChanged();
      }
      if (!other.waitFor_.isEmpty()) {
        if (waitFor_.isEmpty()) {
          waitFor_ = other.waitFor_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureWaitForIsMutable();
          waitFor_.addAll(other.waitFor_);
        }
        onChanged();
      }
      if (!other.getEntrypoint().isEmpty()) {
        entrypoint_ = other.entrypoint_;
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloudbuild.v1.BuildStep parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloudbuild.v1.BuildStep) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the container image that will run this particular build step.
     * If the image is already available in the host's Docker daemon's cache, it
     * will be run directly. If not, the host will attempt to pull the image
     * first, using the builder service account's credentials if necessary.
     * The Docker daemon's cache will already have the latest versions of all of
     * the officially supported build steps
     * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
     * will also have cached many of the layers for some popular images, like
     * "ubuntu", "debian", but they will be refreshed at the time you attempt to
     * use them.
     * If you built an image in a previous build step, it will be stored in the
     * host's Docker daemon's cache and is available to use as the name for a
     * later build step.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the container image that will run this particular build step.
     * If the image is already available in the host's Docker daemon's cache, it
     * will be run directly. If not, the host will attempt to pull the image
     * first, using the builder service account's credentials if necessary.
     * The Docker daemon's cache will already have the latest versions of all of
     * the officially supported build steps
     * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
     * will also have cached many of the layers for some popular images, like
     * "ubuntu", "debian", but they will be refreshed at the time you attempt to
     * use them.
     * If you built an image in a previous build step, it will be stored in the
     * host's Docker daemon's cache and is available to use as the name for a
     * later build step.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the container image that will run this particular build step.
     * If the image is already available in the host's Docker daemon's cache, it
     * will be run directly. If not, the host will attempt to pull the image
     * first, using the builder service account's credentials if necessary.
     * The Docker daemon's cache will already have the latest versions of all of
     * the officially supported build steps
     * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
     * will also have cached many of the layers for some popular images, like
     * "ubuntu", "debian", but they will be refreshed at the time you attempt to
     * use them.
     * If you built an image in a previous build step, it will be stored in the
     * host's Docker daemon's cache and is available to use as the name for a
     * later build step.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the container image that will run this particular build step.
     * If the image is already available in the host's Docker daemon's cache, it
     * will be run directly. If not, the host will attempt to pull the image
     * first, using the builder service account's credentials if necessary.
     * The Docker daemon's cache will already have the latest versions of all of
     * the officially supported build steps
     * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
     * will also have cached many of the layers for some popular images, like
     * "ubuntu", "debian", but they will be refreshed at the time you attempt to
     * use them.
     * If you built an image in a previous build step, it will be stored in the
     * host's Docker daemon's cache and is available to use as the name for a
     * later build step.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the container image that will run this particular build step.
     * If the image is already available in the host's Docker daemon's cache, it
     * will be run directly. If not, the host will attempt to pull the image
     * first, using the builder service account's credentials if necessary.
     * The Docker daemon's cache will already have the latest versions of all of
     * the officially supported build steps
     * (https://github.com/GoogleCloudPlatform/cloud-builders). The Docker daemon
     * will also have cached many of the layers for some popular images, like
     * "ubuntu", "debian", but they will be refreshed at the time you attempt to
     * use them.
     * If you built an image in a previous build step, it will be stored in the
     * host's Docker daemon's cache and is available to use as the name for a
     * later build step.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList env_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureEnvIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        env_ = new com.google.protobuf.LazyStringArrayList(env_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getEnvList() {
      return env_.getUnmodifiableView();
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public int getEnvCount() {
      return env_.size();
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public java.lang.String getEnv(int index) {
      return env_.get(index);
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public com.google.protobuf.ByteString
        getEnvBytes(int index) {
      return env_.getByteString(index);
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public Builder setEnv(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEnvIsMutable();
      env_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public Builder addEnv(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEnvIsMutable();
      env_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public Builder addAllEnv(
        java.lang.Iterable<java.lang.String> values) {
      ensureEnvIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, env_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public Builder clearEnv() {
      env_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of environment variable definitions to be used when running a step.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
     * being given the value "VALUE".
     * </pre>
     *
     * <code>repeated string env = 2;</code>
     */
    public Builder addEnvBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureEnvIsMutable();
      env_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureArgsIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        args_ = new com.google.protobuf.LazyStringArrayList(args_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getArgsList() {
      return args_.getUnmodifiableView();
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public java.lang.String getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public com.google.protobuf.ByteString
        getArgsBytes(int index) {
      return args_.getByteString(index);
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public Builder setArgs(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureArgsIsMutable();
      args_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public Builder addArgs(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureArgsIsMutable();
      args_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public Builder addAllArgs(
        java.lang.Iterable<java.lang.String> values) {
      ensureArgsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, args_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public Builder clearArgs() {
      args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, these args
     * will be used as arguments to that entrypoint. If the image does not define
     * an entrypoint, the first element in args will be used as the entrypoint,
     * and the remainder will be used as arguments.
     * </pre>
     *
     * <code>repeated string args = 3;</code>
     */
    public Builder addArgsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureArgsIsMutable();
      args_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object dir_ = "";
    /**
     * <pre>
     * Working directory (relative to project source root) to use when running
     * this operation's container.
     * </pre>
     *
     * <code>string dir = 4;</code>
     */
    public java.lang.String getDir() {
      java.lang.Object ref = dir_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        dir_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Working directory (relative to project source root) to use when running
     * this operation's container.
     * </pre>
     *
     * <code>string dir = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDirBytes() {
      java.lang.Object ref = dir_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dir_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Working directory (relative to project source root) to use when running
     * this operation's container.
     * </pre>
     *
     * <code>string dir = 4;</code>
     */
    public Builder setDir(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      dir_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Working directory (relative to project source root) to use when running
     * this operation's container.
     * </pre>
     *
     * <code>string dir = 4;</code>
     */
    public Builder clearDir() {
      
      dir_ = getDefaultInstance().getDir();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Working directory (relative to project source root) to use when running
     * this operation's container.
     * </pre>
     *
     * <code>string dir = 4;</code>
     */
    public Builder setDirBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      dir_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object id_ = "";
    /**
     * <pre>
     * Optional unique identifier for this build step, used in wait_for to
     * reference this build step as a dependency.
     * </pre>
     *
     * <code>string id = 5;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Optional unique identifier for this build step, used in wait_for to
     * reference this build step as a dependency.
     * </pre>
     *
     * <code>string id = 5;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Optional unique identifier for this build step, used in wait_for to
     * reference this build step as a dependency.
     * </pre>
     *
     * <code>string id = 5;</code>
     */
    public Builder setId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional unique identifier for this build step, used in wait_for to
     * reference this build step as a dependency.
     * </pre>
     *
     * <code>string id = 5;</code>
     */
    public Builder clearId() {
      
      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional unique identifier for this build step, used in wait_for to
     * reference this build step as a dependency.
     * </pre>
     *
     * <code>string id = 5;</code>
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      id_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList waitFor_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureWaitForIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        waitFor_ = new com.google.protobuf.LazyStringArrayList(waitFor_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getWaitForList() {
      return waitFor_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public int getWaitForCount() {
      return waitFor_.size();
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public java.lang.String getWaitFor(int index) {
      return waitFor_.get(index);
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public com.google.protobuf.ByteString
        getWaitForBytes(int index) {
      return waitFor_.getByteString(index);
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public Builder setWaitFor(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureWaitForIsMutable();
      waitFor_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public Builder addWaitFor(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureWaitForIsMutable();
      waitFor_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public Builder addAllWaitFor(
        java.lang.Iterable<java.lang.String> values) {
      ensureWaitForIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, waitFor_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public Builder clearWaitFor() {
      waitFor_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in wait_for
     * have completed successfully. If wait_for is empty, this build step will
     * start when all previous build steps in the Build.Steps list have completed
     * successfully.
     * </pre>
     *
     * <code>repeated string wait_for = 6;</code>
     */
    public Builder addWaitForBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureWaitForIsMutable();
      waitFor_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object entrypoint_ = "";
    /**
     * <pre>
     * Optional entrypoint to be used instead of the build step image's default
     * If unset, the image's default will be used.
     * </pre>
     *
     * <code>string entrypoint = 7;</code>
     */
    public java.lang.String getEntrypoint() {
      java.lang.Object ref = entrypoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        entrypoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Optional entrypoint to be used instead of the build step image's default
     * If unset, the image's default will be used.
     * </pre>
     *
     * <code>string entrypoint = 7;</code>
     */
    public com.google.protobuf.ByteString
        getEntrypointBytes() {
      java.lang.Object ref = entrypoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        entrypoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Optional entrypoint to be used instead of the build step image's default
     * If unset, the image's default will be used.
     * </pre>
     *
     * <code>string entrypoint = 7;</code>
     */
    public Builder setEntrypoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      entrypoint_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional entrypoint to be used instead of the build step image's default
     * If unset, the image's default will be used.
     * </pre>
     *
     * <code>string entrypoint = 7;</code>
     */
    public Builder clearEntrypoint() {
      
      entrypoint_ = getDefaultInstance().getEntrypoint();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional entrypoint to be used instead of the build step image's default
     * If unset, the image's default will be used.
     * </pre>
     *
     * <code>string entrypoint = 7;</code>
     */
    public Builder setEntrypointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      entrypoint_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.cloudbuild.v1.BuildStep)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.cloudbuild.v1.BuildStep)
  private static final com.google.cloudbuild.v1.BuildStep DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloudbuild.v1.BuildStep();
  }

  public static com.google.cloudbuild.v1.BuildStep getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BuildStep>
      PARSER = new com.google.protobuf.AbstractParser<BuildStep>() {
    public BuildStep parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildStep(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<BuildStep> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BuildStep> getParserForType() {
    return PARSER;
  }

  public com.google.cloudbuild.v1.BuildStep getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

